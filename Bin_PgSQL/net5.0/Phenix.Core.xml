<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Phenix.Core</name>
    </assembly>
    <members>
        <member name="T:Phenix.Core.Actor.ActorConfig">
            <summary>
             Actor配置信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Actor.ActorConfig.GroupMessageStreamId">
            <summary>
            分组消息StreamId
            </summary>
        </member>
        <member name="T:Phenix.Core.Actor.IEntityGrainProxy`1">
            <summary>
            实体Grain代理接口
            </summary>
        </member>
        <member name="M:Phenix.Core.Actor.IEntityGrainProxy`1.ExistKernel">
            <summary>
            存在根实体对象
            </summary>
            <returns>是否存在</returns>
        </member>
        <member name="M:Phenix.Core.Actor.IEntityGrainProxy`1.FetchKernel">
            <summary>
            获取根实体对象
            </summary>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Actor.IEntityGrainProxy`1.PatchKernel(`0)">
            <summary>
            更新根实体对象(如不存在则新增)
            </summary>
            <param name="source">数据源</param>
        </member>
        <member name="M:Phenix.Core.Actor.IEntityGrainProxy`1.PatchKernel(Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新根实体对象(如不存在则新增)
            </summary>
            <param name="propertyValues">待更新属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Actor.IEntityGrainProxy`1.PatchKernel(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新根实体对象(如不存在则新增)
            </summary>
            <param name="propertyValues">待更新属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Actor.IEntityGrainProxy`1.GetKernelProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            获取根实体对象属性值
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <returns>属性值</returns>
        </member>
        <member name="T:Phenix.Core.Actor.ITreeEntityGrainProxy`1">
            <summary>
            实体Grain代理接口
            </summary>
        </member>
        <member name="M:Phenix.Core.Actor.ITreeEntityGrainProxy`1.AddChildNode(System.Int64,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            添加子节点
            </summary>
            <param name="parentId">父节点ID</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>子节点ID</returns>
        </member>
        <member name="M:Phenix.Core.Actor.ITreeEntityGrainProxy`1.AddChildNode(System.Int64,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            添加子节点
            </summary>
            <param name="parentId">父节点ID</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>子节点ID</returns>
        </member>
        <member name="M:Phenix.Core.Actor.ITreeEntityGrainProxy`1.ChangeParentNode(System.Int64,System.Int64)">
            <summary>
            更改父节点
            </summary>
            <param name="id">节点ID</param>
            <param name="parentId">父节点ID</param>
        </member>
        <member name="M:Phenix.Core.Actor.ITreeEntityGrainProxy`1.UpdateNode(System.Int64,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新节点
            </summary>
            <param name="id">节点ID</param>
            <param name="propertyValues">待更新属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Actor.ITreeEntityGrainProxy`1.UpdateNode(System.Int64,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新节点
            </summary>
            <param name="id">节点ID</param>
            <param name="propertyValues">待更新属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Actor.ITreeEntityGrainProxy`1.DeleteNode(System.Int64)">
            <summary>
            删除节点枝杈
            </summary>
            <param name="id">节点ID</param>
        </member>
        <member name="T:Phenix.Core.AppRun">
            <summary>
            应用系统执行
            </summary>
        </member>
        <member name="P:Phenix.Core.AppRun.Debugging">
            <summary>
            调试中?
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.AppRun.BaseDirectory">
            <summary>
            基础目录
            </summary>
        </member>
        <member name="P:Phenix.Core.AppRun.TempDirectory">
            <summary>
            临时目录
            </summary>
        </member>
        <member name="P:Phenix.Core.AppRun.ConfigFilePath">
            <summary>
            配置文件路径
            </summary>
        </member>
        <member name="M:Phenix.Core.AppRun.SplitCulture(System.String)">
            <summary>
            分离出当前线程语言的中英文文本
            </summary>
            <param name="text">用'|'分隔中英文的文本</param>
        </member>
        <member name="M:Phenix.Core.AppRun.FindException``1(System.Exception)">
            <summary>
            检索错误类型
            </summary>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.AppRun.GetErrorMessage(System.Exception)">
            <summary>
            取错误信息
            </summary>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.AppRun.GetErrorHint(System.Exception,System.Collections.Generic.IList{System.Type})">
            <summary>
            取错误提示
            </summary>
            <param name="error">错误</param>
            <param name="ignoreErrorTypes">忽略错误类型</param>
        </member>
        <member name="M:Phenix.Core.AppRun.GetErrorHint(System.Exception,System.Type[])">
            <summary>
            取错误提示
            </summary>
            <param name="error">错误</param>
            <param name="ignoreErrorTypes">忽略错误类型</param>
        </member>
        <member name="M:Phenix.Core.AppRun.IsFatal(System.Exception)">
            <summary>
            是否致命的错误
            </summary>
            <param name="error">错误</param>
        </member>
        <member name="T:Phenix.Core.AppSettings">
            <summary>
            应用配置
            由Database.Default的PH7_AppSettings表存储配置
            </summary>
        </member>
        <member name="P:Phenix.Core.AppSettings.Database">
            <summary>
            数据库入口
            </summary>
        </member>
        <member name="M:Phenix.Core.AppSettings.SaveValue(System.String,System.String,System.Boolean)">
            <summary>
            保存信息
            </summary>
            <param name="key">键</param>
            <param name="value">值(中英文用‘|’分隔)</param>
            <param name="inEncrypt">是否加密</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.ReadValue(System.String,System.Boolean)">
            <summary>
            读取信息(分离出当前线程语言的中英文文本)
            Thread.CurrentThread.CurrentCulture.Name为非'zh-'时返回后半截
            </summary>
            <param name="key">键</param>
            <param name="inEncrypt">是否加密</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.GetValue``1(``0,System.Boolean)">
            <summary>
            读取信息(分离出当前线程语言的中英文文本)
            </summary>
            <param name="defaultValue">缺省值(中英文用‘|’分隔)</param>
            <param name="inEncrypt">是否加密</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.GetValue``1(System.String,``0,System.Boolean)">
            <summary>
            读取信息(分离出当前线程语言的中英文文本)
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">缺省值(中英文用‘|’分隔)</param>
            <param name="inEncrypt">是否加密</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.SetProperty``2(``0@,``1,System.Boolean,System.Boolean)">
            <summary>
            设置属性值
            key = 调用方法全名
            </summary>
            <param name="field">属性字段</param>
            <param name="newValue">新值(中英文用‘|’分隔)</param>
            <param name="inEncrypt">是否加密</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.SetProperty``2(System.String,``0@,``1,System.Boolean,System.Boolean)">
            <summary>
            设置属性值
            </summary>
            <param name="key">键</param>
            <param name="field">属性字段</param>
            <param name="newValue">新值(中英文用‘|’分隔)</param>
            <param name="inEncrypt">是否加密</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.GetProperty``2(``0@,``1,System.Boolean,System.Boolean)">
            <summary>
            获取属性值(分离出当前线程语言的中英文文本)
            key = 调用方法全名
            </summary>
            <param name="field">属性字段</param>
            <param name="defaultValue">缺省值(中英文用‘|’分隔)</param>
            <param name="inEncrypt">是否加密</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.GetProperty``2(System.String,``0@,``1,System.Boolean,System.Boolean)">
            <summary>
            获取属性值(分离出当前线程语言的中英文文本)
            </summary>
            <param name="key">键</param>
            <param name="field">属性字段</param>
            <param name="defaultValue">缺省值(中英文用‘|’分隔)</param>
            <param name="inEncrypt">是否加密</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.SaveLocalValue(System.String,System.String,System.Boolean)">
            <summary>
            保存信息到本地Phenix.Core.db的PH7_AppSettings表
            </summary>
            <param name="key">键</param>
            <param name="value">值(中英文用‘|’分隔)</param>
            <param name="inEncrypt">是否加密</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.ReadLocalValue(System.String,System.Boolean)">
            <summary>
            读取信息自本地Phenix.Core.db的PH7_AppSettings表(分离出当前线程语言的中英文文本)
            Thread.CurrentThread.CurrentCulture.Name为非'zh-'时返回后半截
            </summary>
            <param name="key">键</param>
            <param name="inEncrypt">是否加密</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.GetLocalValue``1(``0,System.Boolean)">
            <summary>
            读取信息自本地Phenix.Core.db的PH7_AppSettings表(分离出当前线程语言的中英文文本)
            </summary>
            <param name="defaultValue">缺省值(中英文用‘|’分隔)</param>
            <param name="inEncrypt">是否加密</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.GetLocalValue``1(System.String,``0,System.Boolean)">
            <summary>
            读取信息自本地Phenix.Core.db的PH7_AppSettings表(分离出当前线程语言的中英文文本)
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">缺省值(中英文用‘|’分隔)</param>
            <param name="inEncrypt">是否加密</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.SetLocalProperty``2(``0@,``1,System.Boolean,System.Boolean)">
            <summary>
            设置属性值到本地Phenix.Core.db的PH7_AppSettings表
            key = 调用方法全名
            </summary>
            <param name="field">属性字段</param>
            <param name="newValue">新值(中英文用‘|’分隔)</param>
            <param name="inEncrypt">是否加密</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.SetLocalProperty``2(System.String,``0@,``1,System.Boolean,System.Boolean)">
            <summary>
            设置属性值到本地Phenix.Core.db的PH7_AppSettings表
            </summary>
            <param name="key">键</param>
            <param name="field">属性字段</param>
            <param name="newValue">新值(中英文用‘|’分隔)</param>
            <param name="inEncrypt">是否加密</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.GetLocalProperty``2(``0@,``1,System.Boolean,System.Boolean)">
            <summary>
            获取属性值自本地Phenix.Core.db的PH7_AppSettings表(分离出当前线程语言的中英文文本)
            key = 调用方法全名
            </summary>
            <param name="field">属性字段</param>
            <param name="defaultValue">缺省值(中英文用‘|’分隔)</param>
            <param name="inEncrypt">是否加密</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="M:Phenix.Core.AppSettings.GetLocalProperty``2(System.String,``0@,``1,System.Boolean,System.Boolean)">
            <summary>
            获取属性值自本地Phenix.Core.db的PH7_AppSettings表(分离出当前线程语言的中英文文本)
            </summary>
            <param name="key">键</param>
            <param name="field">属性字段</param>
            <param name="defaultValue">缺省值(中英文用‘|’分隔)</param>
            <param name="inEncrypt">是否加密</param>
            <param name="allowSave">允许保存状态信息?</param>
        </member>
        <member name="T:Phenix.Core.Data.Common.DataReader">
            <summary>
            数据读取器
            封装 DbDataReader (自组织 Transaction/Connection+Command 的实现)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(System.Data.Common.DbDataReader,System.Nullable{System.Boolean})">
            <summary>
            初始化
            </summary>
            <param name="worker">DbDataReader</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(System.Data.Common.DbCommand,System.Nullable{System.Boolean})">
            <summary>
            初始化
            </summary>
            <param name="command">DbCommand</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Nullable{System.Boolean})">
            <summary>
            初始化
            </summary>
            <param name="command">DbCommand</param>
            <param name="behavior">CommandBehavior</param>
            <param name="needSaveLog">是否保存日志</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(System.Data.Common.DbConnection,System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            初始化
            </summary>
            <param name="connection">DbConnection</param>
            <param name="sql">SQL 语句</param>
            <param name="paramValues">参数值</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(System.Data.Common.DbConnection,System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            初始化
            </summary>
            <param name="connection">DbConnection</param>
            <param name="sql">SQL 语句</param>
            <param name="needSaveLog">是否保存日志</param>
            <param name="paramValues">参数值</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(System.Data.Common.DbConnection,System.String,System.Data.CommandBehavior,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            初始化
            </summary>
            <param name="connection">DbConnection</param>
            <param name="sql">SQL 语句</param>
            <param name="behavior">CommandBehavior</param>
            <param name="paramValues">参数值</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(System.Data.Common.DbConnection,System.String,System.Data.CommandBehavior,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            初始化
            </summary>
            <param name="connection">DbConnection</param>
            <param name="sql">SQL 语句</param>
            <param name="behavior">CommandBehavior</param>
            <param name="needSaveLog">是否保存日志</param>
            <param name="paramValues">参数值</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(System.Data.Common.DbTransaction,System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            初始化
            </summary>
            <param name="transaction">DbTransaction</param>
            <param name="sql">SQL 语句</param>
            <param name="paramValues">参数值</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(System.Data.Common.DbTransaction,System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            初始化
            </summary>
            <param name="transaction">DbTransaction</param>
            <param name="sql">SQL 语句</param>
            <param name="needSaveLog">是否保存日志</param>
            <param name="paramValues">参数值</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(System.Data.Common.DbTransaction,System.String,System.Data.CommandBehavior,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            初始化
            </summary>
            <param name="transaction">DbTransaction</param>
            <param name="sql">SQL 语句</param>
            <param name="behavior">CommandBehavior</param>
            <param name="paramValues">参数值</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(System.Data.Common.DbTransaction,System.String,System.Data.CommandBehavior,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            初始化
            </summary>
            <param name="transaction">DbTransaction</param>
            <param name="sql">SQL 语句</param>
            <param name="behavior">CommandBehavior</param>
            <param name="needSaveLog">是否保存日志</param>
            <param name="paramValues">参数值</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(Phenix.Core.Data.Database,System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            初始化
            </summary>
            <param name="database">数据库入口</param>
            <param name="sql">SQL 语句</param>
            <param name="paramValues">参数值</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(Phenix.Core.Data.Database,System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            初始化
            </summary>
            <param name="database">数据库入口</param>
            <param name="sql">SQL 语句</param>
            <param name="needSaveLog">是否保存日志</param>
            <param name="paramValues">参数值</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(Phenix.Core.Data.Database,System.String,System.Data.CommandBehavior,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            初始化
            </summary>
            <param name="database">数据库入口</param>
            <param name="sql">SQL 语句</param>
            <param name="behavior">CommandBehavior</param>
            <param name="paramValues">参数值</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.#ctor(Phenix.Core.Data.Database,System.String,System.Data.CommandBehavior,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            初始化
            </summary>
            <param name="database">数据库入口</param>
            <param name="sql">SQL 语句</param>
            <param name="behavior">CommandBehavior</param>
            <param name="needSaveLog">是否保存日志</param>
            <param name="paramValues">参数值</param>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.Database">
            <summary>
            数据库入口
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.Sql">
            <summary>
            SQL 语句
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.Behavior">
            <summary>
            CommandBehavior
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.NeedSaveLog">
            <summary>
            是否保存日志
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.ParamValues">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.Command">
            <summary>
            DbCommand
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.Connection">
            <summary>
            DbConnection
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.Transaction">
            <summary>
            DbTransaction
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.Worker">
            <summary>
            DbDataReader
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.Depth">
            <summary>
            嵌套深度
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.FieldCount">
            <summary>
            字段数量
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.HasRows">
            <summary>
            是否包含一行或多行
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.IsClosed">
            <summary>
            是否关闭
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.Item(System.Int32)">
            <summary>
            按照索引检索值
            </summary>
            <param name="ordinal">索引</param>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.Item(System.String)">
            <summary>
            按照字段名检索值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.RecordsAffected">
            <summary>
            通过执行 SQL 语句获取插入、更改或删除的行数
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.DataReader.VisibleFieldCount">
            <summary>
            未隐藏的字段的数目
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.DisposeManagedResources">
            <summary>
            释放托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.DisposeUnmanagedResources">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetSchemaTable">
            <summary>
            获取元数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.Read">
            <summary>
            读取下一条记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.ReadAsync">
            <summary>
            读取下一条记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            读取下一条记录
            </summary>
            <param name="cancellationToken">取消指示，用于对应该取消操作的通知进行传播</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.NextResult">
            <summary>
            前进到下一个结果集
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.NextResultAsync">
            <summary>
            前进到下一个结果集
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.NextResultAsync(System.Threading.CancellationToken)">
            <summary>
            前进到下一个结果集
            </summary>
            <param name="cancellationToken">取消指示，用于对应该取消操作的通知进行传播</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetValues(System.Object[])">
            <summary>
            获取当前行的集合中的所有属性列
            </summary>
            <param name="values">要将属性列复制到的 Object 数组</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetOrdinal(System.String)">
            <summary>
            获取序号
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetName(System.Int32)">
            <summary>
            获取字段名
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetDataTypeName(System.String)">
            <summary>
            获取数据类型
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetDataTypeName(System.Int32)">
            <summary>
            获取数据类型
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetFieldType(System.String)">
            <summary>
            获取字段类型
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetFieldType(System.Int32)">
            <summary>
            获取字段类型
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.IsDBNull(System.String)">
            <summary>
            是否包含不存在的或已丢失的值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.IsDBNull(System.Int32)">
            <summary>
            是否包含不存在的或已丢失的值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.IsDBNullAsync(System.Int32)">
            <summary>
            是否包含不存在的或已丢失的值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            是否包含不存在的或已丢失的值
            </summary>
            <param name="ordinal">序号</param>
            <param name="cancellationToken">取消指示，用于对应该取消操作的通知进行传播</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetFieldValue``1(System.String)">
            <summary>
            获取字段值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetFieldValue``1(System.Int32)">
            <summary>
            获取字段值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetFieldValueAsync``1(System.Int32)">
            <summary>
            获取字段值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
            <summary>
            获取字段值
            </summary>
            <param name="ordinal">序号</param>
            <param name="cancellationToken">取消指示，用于对应该取消操作的通知进行传播</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetValue(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetValue``1(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetValue``1(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetValue(System.String,System.Type)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
            <param name="resultType">返回值的类型</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetValue(System.Int32,System.Type)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
            <param name="resultType">返回值的类型</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetStream(System.String)">
            <summary>
            获取数据流
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetStream(System.Int32)">
            <summary>
            获取数据流
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetTextReader(System.String)">
            <summary>
            获取文本流
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetTextReader(System.Int32)">
            <summary>
            获取文本流
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetString(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetString(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetGuid(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetGuid(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetBoolean(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetBoolean(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetByte(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetByte(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetBytes(System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
            <param name="dataOffset">行中的索引，从其开始读取操作</param>
            <param name="buffer">作为数据复制目标的缓冲区</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引</param>
            <param name="length">最多读取的字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
            <param name="dataOffset">行中的索引，从其开始读取操作</param>
            <param name="buffer">作为数据复制目标的缓冲区</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引</param>
            <param name="length">最多读取的字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetChar(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetChar(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetChars(System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
            <param name="dataOffset">行中的索引，从其开始读取操作</param>
            <param name="buffer">作为数据复制目标的缓冲区</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引</param>
            <param name="length">最多读取的字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
            <param name="dataOffset">行中的索引，从其开始读取操作</param>
            <param name="buffer">作为数据复制目标的缓冲区</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引</param>
            <param name="length">最多读取的字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetDateTime(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetDateTime(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetDecimal(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetDecimal(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetInt64ForDecimal(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetInt64ForDecimal(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetBooleanForDecimal(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetBooleanForDecimal(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetFloat(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetFloat(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetDouble(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetDouble(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetInt16(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetInt16(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetInt32(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetInt32(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetInt64(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetInt64(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableString(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableGuid(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableBoolean(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableByte(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
            <param name="dataOffset">行中的索引，从其开始读取操作</param>
            <param name="buffer">作为数据复制目标的缓冲区</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引</param>
            <param name="length">最多读取的字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableChar(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
            <param name="dataOffset">行中的索引，从其开始读取操作</param>
            <param name="buffer">作为数据复制目标的缓冲区</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引</param>
            <param name="length">最多读取的字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableDateTime(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableDecimal(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableInt64ForDecimal(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableBooleanForDecimal(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableFloat(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableDouble(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableInt16(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableInt32(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.GetNullableInt64(System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="ordinal">序号</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.CreateParameter(System.Object)">
            <summary>
            构建 DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.CreateParameter(System.Nullable{System.Int32},System.Object)">
            <summary>
            构建 DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.CreateParameter(System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            构建 DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.CreateParameter(System.String,System.Object,NpgsqlTypes.NpgsqlDbType,System.Nullable{System.Int32})">
            <summary>
            构建 DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.SelectEntity``1(System.Boolean)">
            <summary>
            获取记录
            </summary>
            <param name="first">是否返回第一条记录</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReader.SelectRecord(System.Boolean)">
            <summary>
            获取记录(属性名为表/视图的字段名/别名)
            </summary>
            <param name="first">是否返回第一条记录</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="T:Phenix.Core.Data.Common.DbCommandHelper">
            <summary>
            DbCommand 助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateCommand(System.Data.Common.DbConnection,System.String)">
            <summary>
            构建 DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateCommand(System.Data.Common.DbTransaction,System.String)">
            <summary>
            构建 DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateStoredProc(System.Data.Common.DbConnection)">
            <summary>
            构建存储过程 DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateStoredProc(System.Data.Common.DbTransaction)">
            <summary>
            构建存储过程 DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateStoredProc(System.Data.Common.DbConnection,System.String)">
            <summary>
            构建存储过程 DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateStoredProc(System.Data.Common.DbTransaction,System.String)">
            <summary>
            构建存储过程 DbCommand
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteNonQuery(System.Data.Common.DbCommand,System.Nullable{System.Boolean})">
            <summary>
            执行 DbCommand
            </summary>
            <returns>执行记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行 DbCommand
            </summary>
            <returns>执行记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行 DbCommand
            </summary>
            <returns>执行记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteNonQuery(System.Data.Common.DbTransaction,System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行 DbCommand
            </summary>
            <returns>执行记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteNonQuery(System.Data.Common.DbTransaction,System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行 DbCommand
            </summary>
            <returns>执行记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteStoredProc(System.Data.Common.DbConnection,System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
            <returns>结果集(参数名-参数值)</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteStoredProc(System.Data.Common.DbConnection,System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
            <returns>结果集(参数名-参数值)</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteStoredProc(System.Data.Common.DbTransaction,System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
            <returns>结果集(参数名-参数值)</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteStoredProc(System.Data.Common.DbTransaction,System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
            <returns>结果集(参数名-参数值)</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteScalar(System.Data.Common.DbCommand,System.Nullable{System.Boolean})">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteScalar(System.Data.Common.DbConnection,System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteScalar(System.Data.Common.DbTransaction,System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteScalar(System.Data.Common.DbTransaction,System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteReader(System.Data.Common.DbCommand,System.Nullable{System.Boolean})">
            <summary>
            执行查询
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteReader(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Nullable{System.Boolean})">
            <summary>
            执行查询
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteReader(System.Data.Common.DbConnection,System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行查询
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行查询
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Data.CommandBehavior,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行查询
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Data.CommandBehavior,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行查询
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteReader(System.Data.Common.DbTransaction,System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行查询
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteReader(System.Data.Common.DbTransaction,System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行查询
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteReader(System.Data.Common.DbTransaction,System.String,System.Data.CommandBehavior,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行查询
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.ExecuteReader(System.Data.Common.DbTransaction,System.String,System.Data.CommandBehavior,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行查询
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.FillDataSet(System.Data.Common.DbCommand,System.Nullable{System.Boolean})">
            <summary>
            填充 DataSet
            </summary>
            <param name="command">DbCommand</param>
            <param name="needSaveLog">是否记录日志</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.FillDataSet(System.Data.Common.DbConnection,System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            填充 DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.FillDataSet(System.Data.Common.DbConnection,System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            填充 DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.FillDataSet(System.Data.Common.DbTransaction,System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            填充 DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.FillDataSet(System.Data.Common.DbTransaction,System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            填充 DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.Object)">
            <summary>
            构建 DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.Nullable{System.Int32},System.Object)">
            <summary>
            构建 DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            构建 DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,NpgsqlTypes.NpgsqlDbType,System.Data.ParameterDirection)">
            <summary>
            构建 DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,NpgsqlTypes.NpgsqlDbType,System.Data.ParameterDirection,System.Nullable{System.Int32})">
            <summary>
            构建 DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,System.Object,NpgsqlTypes.NpgsqlDbType,System.Nullable{System.Int32})">
            <summary>
            构建 DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.String,System.Object,NpgsqlTypes.NpgsqlDbType,System.Data.ParameterDirection,System.Nullable{System.Int32})">
            <summary>
            构建 DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            构建 DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.CreateParameter(System.Data.Common.DbCommand,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            构建 DbParameter
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbCommandHelper.PackCommandInfo(System.Data.Common.DbCommand)">
            <summary>
            打包 DbCommand 信息
            </summary>
            <returns>XML格式内容</returns>
        </member>
        <member name="T:Phenix.Core.Data.Common.DbConnectionHelper">
            <summary>
            DbConnection 助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.BuildConnectionString(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            构建数据库连接串
            </summary>
            <param name="dataSource">数据源</param>
            <param name="port">端口</param>
            <param name="databaseName">数据库名称</param>
            <param name="userId">用户ID</param>
            <param name="password">用户口令</param>
            <param name="pooling">使用连接池</param>
            <param name="minPoolSize">最小连接池</param>
            <param name="maxPoolSize">最大连接池</param>
            <param name="connectionLifetime">连接生命周期</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.CreateConnection">
            <summary>
            构建 DbConnection
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.CreateConnection(System.String)">
            <summary>
            构建 DbConnection
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.TryConnection(System.String,System.Exception@)">
            <summary>
            尝试连接
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.TryConnection(System.Data.Common.DbConnection,System.Exception@)">
            <summary>
            尝试连接
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.OpenConnection(System.Data.Common.DbConnection)">
            <summary>
            打开连接
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.BeginTransaction(System.Data.Common.DbConnection)">
            <summary>
            开始数据库事务
            </summary>
            <param name="connection">DbConnection</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.Execute(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction})">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.Execute``1(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.Execute``2(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.Execute``3(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.Execute``4(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.Execute``5(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.Execute``6(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.Execute``7(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.Execute``8(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.Execute``9(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.Execute``10(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.Execute``11(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.Execute``12(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.ExecuteGet``1(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.ExecuteGet``2(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.ExecuteGet``3(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.ExecuteGet``4(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.ExecuteGet``5(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.ExecuteGet``6(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.ExecuteGet``7(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.ExecuteGet``8(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.ExecuteGet``9(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.ExecuteGet``10(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.ExecuteGet``11(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.ExecuteGet``12(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DbConnectionHelper.ExecuteGet``13(System.Data.Common.DbConnection,System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="connection">DbConnection</param>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="T:Phenix.Core.Data.Common.ParamValue">
            <summary>
            参数值
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.ParamValue.Input(System.String,System.Object)">
            <summary>
            输入参数
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.ParamValue.Input(System.String,System.Object,NpgsqlTypes.NpgsqlDbType)">
            <summary>
            输入输出参数
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="dbType">参数类型</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.ParamValue.InputOutput(System.String,System.Object,NpgsqlTypes.NpgsqlDbType)">
            <summary>
            输入输出参数
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="dbType">参数类型</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.ParamValue.Output(System.String,NpgsqlTypes.NpgsqlDbType)">
            <summary>
            输出参数
            </summary>
            <param name="name">名称</param>
            <param name="dbType">参数类型</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.ParamValue.ReturnValue(System.String,NpgsqlTypes.NpgsqlDbType)">
            <summary>
            返回值
            </summary>
            <param name="name">名称</param>
            <param name="dbType">参数类型</param>
        </member>
        <member name="P:Phenix.Core.Data.Common.ParamValue.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.ParamValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.ParamValue.DbType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Common.ParamValue.Direction">
            <summary>
            ParameterDirection
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Common.SqlHelper">
            <summary>
            SQL助手
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.ClearSpare(System.String)">
            <summary>
            清理脚本前后多余的字符
            </summary>
            <param name="script">脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.ClearComment(System.String)">
            <summary>
            清理脚本里的引号、注释
            </summary>
            <param name="script">脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.FetchScriptIsUnion(System.String)">
            <summary>
            fetchScript是否是联接语句
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.FetchScriptIsGroup(System.String)">
            <summary>
            fetchScript是否是分组语句
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.FetchScriptIsComplex(System.String)">
            <summary>
            fetchScript是否是复合语句
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.FindFromIndex(System.String)">
            <summary>
            检索from语句在fetch脚本中的位置
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.FindWhereIndex(System.String)">
            <summary>
            检索where语句在fetch脚本中的位置
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.FindOrderIndex(System.String)">
            <summary>
            检索orderby语句在fetch脚本中的位置
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.FindGroupIndex(System.String)">
            <summary>
            检索groupby语句在fetch脚本中的位置
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.FindConnectIndex(System.String)">
            <summary>
            检索connectby语句在fetch脚本中的位置
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.GetColumnBody(System.String)">
            <summary>
            取fetchScript中字段体
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.GetOrderBody(System.String)">
            <summary>
            取fetchScript中排序体
            </summary>
            <param name="fetchScript">fetch脚本</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.GetSourceBody(System.String)">
            <summary>
            取fetchScript中数据源队列
            </summary>
            <param name="fetchScript">fetch脚本</param>
            <returns>结果集(tableName-tableAliases)</returns>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.FindColumnExpression(System.String,System.String)">
            <summary>
            搜寻与字段别名对应的表达式
            </summary>
            <param name="columnBody">字段体</param>
            <param name="columnAlias">字段别名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.UniqueParameterName">
            <summary>
            唯一参数名 = 参数名+随机号 
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.AssembleFullTableColumnName(System.String,System.String)">
            <summary>
            拼装完整字段名 = 表名.字段名
            当columnName中存在表名时返回值不变
            </summary>
            <param name="tableName">表名</param>
            <param name="columnName">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.ExtractColumnSource(System.String)">
            <summary>
            抽取字段数据源
            </summary>
            <param name="columnName">字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.SqlHelper.ExtractShortColumnName(System.String)">
            <summary>
            抽取短字段名
            剔除columnName中的表名
            </summary>
            <param name="columnName">字段名</param>
        </member>
        <member name="T:Phenix.Core.Data.Database">
            <summary>
            数据库入口
            由Phenix.Core.db的PH7_Database表提供入口配置
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.ConfigFilePath">
            <summary>
            配置文件路径
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Database.DefaultDataSourceKey">
            <summary>
            缺省数据源键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.Default">
            <summary>
            缺省数据库入口
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.Fetch(System.String,System.Boolean)">
            <summary>
            获取数据库入口
            </summary>
            <param name="dataSourceKey">数据源键(null或*代表默认入口)</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>数据库入口</returns>
        </member>
        <member name="M:Phenix.Core.Data.Database.RegisterDefault(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            注册数据库入口
            </summary>
            <param name="dataSource">数据源</param>
            <param name="port">端口</param>
            <param name="databaseName">数据库名称</param>
            <param name="userId">用户ID</param>
            <param name="password">用户口令</param>
            <param name="pooling">使用连接池</param>
            <param name="minPoolSize">最小连接池</param>
            <param name="maxPoolSize">最大连接池</param>
            <param name="connectionLifetime">连接生命周期</param>
            <returns>数据库入口</returns>
        </member>
        <member name="P:Phenix.Core.Data.Database.ClearingPoolsThresholdOfExceptionPerMinute">
            <summary>
            清空连接池的缺陷阈值(每分钟次数)
            默认：60(>=60)
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.DataSourceSubIndex">
            <summary>
            数据源子索引
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.DataSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.DatabaseName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.Pooling">
            <summary>
            使用连接池
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.MinPoolSize">
            <summary>
            最小连接池
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.MaxPoolSize">
            <summary>
            最大连接池
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.ConnectionLifetime">
            <summary>
            连接生命周期
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.ConnectionString">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.MetaData">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.Sequence">
            <summary>
            64位序号
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.Increment">
            <summary>
            64位增量
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Database.Handles">
            <summary>
            实际操作的数据库入口(0为主库序号，1-N为分库序号)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.ResetMetaData">
            <summary>
            重置元数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.GetHandle(System.Object)">
            <summary>
            获取实际操作的数据库入口
            </summary>
            <param name="routeKey">路由键</param>
            <returns>Handles[routeKey != null ? Math.Abs(routeKey.GetHashCode()) % (Handles.Count + 1) : 0]</returns>
        </member>
        <member name="M:Phenix.Core.Data.Database.ClearAllPools">
            <summary>
            清空连接池
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.GetConnection(System.Boolean)">
            <summary>
            提取 DbConnection
            </summary>
            <param name="clearAllPools">清空连接池</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.PutConnection(System.Data.Common.DbConnection)">
            <summary>
            安置 DbConnection
            </summary>
            <param name="connection">DbConnection</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.TryConnection">
            <summary>
            尝试连接
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.TryConnection(System.Exception@)">
            <summary>
            尝试连接
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute(System.Action{System.Data.Common.DbConnection})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``1(System.Action{System.Data.Common.DbConnection,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``2(System.Action{System.Data.Common.DbConnection,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``3(System.Action{System.Data.Common.DbConnection,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``4(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``5(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``6(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``7(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``8(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``9(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``10(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``11(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``12(System.Action{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``1(System.Func{System.Data.Common.DbConnection,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``2(System.Func{System.Data.Common.DbConnection,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``3(System.Func{System.Data.Common.DbConnection,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``4(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``5(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``6(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``7(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``8(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``9(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``10(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``11(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``12(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``13(System.Func{System.Data.Common.DbConnection,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute(System.Action{System.Data.Common.DbTransaction})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``1(System.Action{System.Data.Common.DbTransaction,``0},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``2(System.Action{System.Data.Common.DbTransaction,``0,``1},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``3(System.Action{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``4(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``5(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``6(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``7(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``8(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``9(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``10(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``11(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.Execute``12(System.Action{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecute">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``1(System.Func{System.Data.Common.DbTransaction,``0})">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``2(System.Func{System.Data.Common.DbTransaction,``0,``1},``0)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``3(System.Func{System.Data.Common.DbTransaction,``0,``1,``2},``0,``1)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``4(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``5(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``6(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``7(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``8(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``9(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``10(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``11(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``12(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteGet``13(System.Func{System.Data.Common.DbTransaction,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            执行数据库操作
            </summary>
            <param name="doExecuteGet">执行数据库操作处理函数</param>
            <param name="in1">in参数1</param>
            <param name="in2">in参数2</param>
            <param name="in3">in参数3</param>
            <param name="in4">in参数4</param>
            <param name="in5">in参数5</param>
            <param name="in6">in参数6</param>
            <param name="in7">in参数7</param>
            <param name="in8">in参数8</param>
            <param name="in9">in参数9</param>
            <param name="in10">in参数10</param>
            <param name="in11">in参数11</param>
            <param name="in12">in参数12</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteNonQuery(System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行DbCommand
            </summary>
            <returns>执行记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteNonQuery(System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行DbCommand
            </summary>
            <returns>执行记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteStoredProc(System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
            <returns>结果集(参数名-参数值)</returns>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteStoredProc(System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行存储过程
            </summary>
            <returns>结果集(参数名-参数值)</returns>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteScalar(System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:Phenix.Core.Data.Database.ExecuteScalar(System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:Phenix.Core.Data.Database.CreateDataReader(System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            构建 DataReader
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.CreateDataReader(System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            构建 DataReader
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.CreateDataReader(System.String,System.Data.CommandBehavior,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            构建 DataReader
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.CreateDataReader(System.String,System.Data.CommandBehavior,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            构建 DataReader
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.ReadEntityData``1(System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            读取实体对象数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.ReadEntityData``1(System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            读取实体对象数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.ReadEntityData``1(System.String,System.Data.CommandBehavior,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            读取实体对象数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.ReadEntityData``1(System.String,System.Data.CommandBehavior,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            读取实体对象数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.ReadJsonData(System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            读取JSON格式数据(属性名为表/视图的字段名/别名)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.ReadJsonData(System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            读取JSON格式数据(属性名为表/视图的字段名/别名)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.ReadJsonData(System.String,System.Data.CommandBehavior,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            读取JSON格式数据(属性名为表/视图的字段名/别名)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.ReadJsonData(System.String,System.Data.CommandBehavior,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            读取JSON格式数据(属性名为表/视图的字段名/别名)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.FillDataSet(System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            填充 DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.FillDataSet(System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            填充 DataSet
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Database.AddTimedTask(System.String,System.Action{System.Data.Common.DbConnection},System.Int32,System.Int32)">
            <summary>
            添加定时执行的任务
            </summary>
            <param name="key">key</param>
            <param name="cycleTimedTask">定时任务</param>
            <param name="cycleDayMultiple">执行于每月里可被参数(2~28)除整的日期(范围以外为每天)</param>
            <param name="cycleHourMultiple">执行于被筛选日期里可被参数(2~23)除整的小时(范围以外为每小时)</param>
        </member>
        <member name="M:Phenix.Core.Data.Database.RemoveTimedTask(System.String)">
            <summary>
            移除定时执行的任务
            </summary>
            <param name="key">key</param>
        </member>
        <member name="T:Phenix.Core.Data.EnumCaptionAttribute">
            <summary>
            枚举字段标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EnumCaptionAttribute.#ctor(System.String)">
            <summary>
            枚举字段标签
            </summary>
            <param name="caption">标签(中英文用‘|’分隔)</param>
        </member>
        <member name="P:Phenix.Core.Data.EnumCaptionAttribute.Caption">
            <summary>
            标签(中英文用‘|’分隔)
            Thread.CurrentThread.CurrentCulture.Name为非'zh-'时返回后半截
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EnumCaptionAttribute.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EnumCaptionAttribute.Tag">
            <summary>
            标记
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.EnumKeyValue">
            <summary>
            枚举键值
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.Fetch``1(System.Predicate{Phenix.Core.Data.EnumKeyValue})">
            <summary>
            根据枚举类型定义构建
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.Fetch(System.Type,System.Predicate{Phenix.Core.Data.EnumKeyValue})">
            <summary>
            根据枚举类型定义构建
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.Fetch(System.Enum)">
            <summary>
            根据枚举值构建填充
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.EnumKeyValue._value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EnumKeyValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EnumKeyValue.Flag">
            <summary>
            标记
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EnumKeyValue.EnumCaption">
            <summary>
            枚举字段标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EnumKeyValue.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EnumKeyValue.Caption">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.EnumKeyValue.Tag">
            <summary>
            标记
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.CaptionsToFlags``1(System.String,System.Char)">
            <summary>
            将标签组合替换成标记组合
            </summary>
            <param name="captions">标签组合</param>
            <param name="separator">标签分隔符</param>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.FlagsToCaptions``1(System.String,System.Char)">
            <summary>
            将标记组合替换成标签组合
            </summary>
            <param name="flags">标记组合</param>
            <param name="separator">标签分隔符</param>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.CompareTo(System.Object)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.CompareTo(Phenix.Core.Data.EnumKeyValue)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.Compare(Phenix.Core.Data.EnumKeyValue,Phenix.Core.Data.EnumKeyValue)">
            <summary>
            比较对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.op_Equality(Phenix.Core.Data.EnumKeyValue,Phenix.Core.Data.EnumKeyValue)">
            <summary>
            等于
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.op_Inequality(Phenix.Core.Data.EnumKeyValue,Phenix.Core.Data.EnumKeyValue)">
            <summary>
            不等于
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.op_LessThan(Phenix.Core.Data.EnumKeyValue,Phenix.Core.Data.EnumKeyValue)">
            <summary>
            小于
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.op_GreaterThan(Phenix.Core.Data.EnumKeyValue,Phenix.Core.Data.EnumKeyValue)">
            <summary>
            大于
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.EnumKeyValue.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.ExecuteAction">
            <summary>
            执行动作
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.ExecuteAction.None">
            <summary>
            无 
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.ExecuteAction.Insert">
            <summary>
            新增 
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.ExecuteAction.Update">
            <summary>
            更新 
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.ExecuteAction.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Expressions.CriteriaExpression">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.#ctor(Phenix.Core.Data.Expressions.CriteriaExpressionType,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.CriteriaLogical,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.OperationExpression,Phenix.Core.Data.Expressions.CriteriaOperator,Phenix.Core.Data.Expressions.OperationExpression,System.Boolean,System.Object,System.Boolean,System.Boolean)">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.True">
            <summary>
            条件表达式: True
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.False">
            <summary>
            条件表达式: False
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            条件表达式
            </summary>
            <param name="criteriaLambda">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.op_BitwiseAnd(Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            And
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.op_BitwiseAnd(Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            And
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.op_BitwiseAnd(System.Boolean,Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            And
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.op_BitwiseOr(Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            Or
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.op_BitwiseOr(Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            Or
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.op_BitwiseOr(System.Boolean,Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            Or
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.op_LogicalNot(Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            Not
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.Exists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Exists
            </summary>
            <param name="detailForeignKeyPropertyLambda">含从类虚/实外键属性的 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.Exists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Exists
            </summary>
            <param name="insideCriteriaLambda">内条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.Exists(Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            Exists
            </summary>
            <param name="insideCriteriaExpression">内条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.NotExists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            NotExists
            </summary>
            <param name="detailForeignKeyPropertyLambda">含从类虚/实外键属性的 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.NotExists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            NotExists
            </summary>
            <param name="insideCriteriaLambda">内条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.NotExists(Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            NotExists
            </summary>
            <param name="insideCriteriaExpression">内条件表达式</param>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.OwnerType">
            <summary>
            所属类(指主体类)
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.CriteriaExpressionType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.Left">
            <summary>
            条件表达式左
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.FirstLeft">
            <summary>
            首个条件表达式左
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.Logical">
            <summary>
            条件组合关系
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.Right">
            <summary>
            条件表达式右
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.LeftOperation">
            <summary>
            条件运算表达式左
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.CriteriaOperator">
            <summary>
            条件运算符
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.OperateIgnoreCase">
            <summary>
            条件运算忽略大小写
            仅针对字符串类型的字段
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.RightOperation">
            <summary>
            条件运算表达式右
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.HaveValue">
            <summary>
            是否存在值
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.CriteriaExpression.ShortValue">
            <summary>
            短路值
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.CriteriaExpression.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Expressions.CriteriaExpressionType">
            <summary>
            条件表达式类型
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaExpressionType.CriteriaLogical">
            <summary>
            组合
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaExpressionType.CriteriaOperate">
            <summary>
            运算
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaExpressionType.ExistsOrNotExists">
            <summary>
            子条件
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaExpressionType.Short">
            <summary>
            短路
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Expressions.CriteriaLogical">
            <summary>
            条件组合关系
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaLogical.And">
            <summary>
            and
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaLogical.Or">
            <summary>
            or
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaLogical.Not">
            <summary>
            not
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Expressions.CriteriaOperator">
            <summary>
            条件运算符
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.None">
            <summary>
            无(不参与SQL的拼装但参与参数定义和赋值)
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.Embed">
            <summary>
            嵌入  
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.Equal">
            <summary>
            等于  
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.GreaterOrEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.Lesser">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.LesserOrEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.Unequal">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.Like">
            <summary>
            像
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.LikeLeft">
            <summary>
            像左侧
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.LikeRight">
            <summary>
            像右侧
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.Unlike">
            <summary>
            不像
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.IsNull">
            <summary>
            是空值
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.IsNotNull">
            <summary>
            非空值
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.In">
            <summary>
            包含(适用于关联关系也支持Array)
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.NotIn">
            <summary>
            不包含(适用于关联关系也支持Array)
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.Exists">
            <summary>
            存在于(适用于关联关系)
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.CriteriaOperator.NotExists">
            <summary>
            不存在于(适用于关联关系)
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Expressions.NameValue`1">
            <summary>
            键值对
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.NameValue`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            设置键值对
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.NameValue`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            设置键值对
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="valueLambda">值 lambda 表达式</param>
        </member>
        <member name="T:Phenix.Core.Data.Expressions.NameValue">
            <summary>
            键值对
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.NameValue.#ctor(System.String,System.Object,Phenix.Core.Data.Expressions.NameValue)">
            <summary>
            初始化
            </summary>
            <param name="name">名</param>
            <param name="value">值</param>
            <param name="prior">先前</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.NameValue.Set(System.String,System.Object,Phenix.Core.Data.Expressions.NameValue)">
            <summary>
            设置键值对
            </summary>
            <param name="name">名</param>
            <param name="value">值</param>
            <param name="prior">先前</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.NameValue.Set``1(System.String,System.Object,Phenix.Core.Data.Expressions.NameValue)">
            <summary>
            设置键值对
            </summary>
            <param name="name">名</param>
            <param name="value">值</param>
            <param name="prior">先前</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.NameValue.Set``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,Phenix.Core.Data.Expressions.NameValue)">
            <summary>
            设置键值对
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="value">值</param>
            <param name="prior">先前</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.NameValue.Set``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Phenix.Core.Data.Expressions.NameValue)">
            <summary>
            设置键值对
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="valueLambda">值 lambda 表达式</param>
            <param name="prior">先前</param>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.NameValue.Name">
            <summary>
            名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.NameValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.NameValue.Prior">
            <summary>
            先前
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.NameValue.ToDictionary(Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            转换为数据字典
            </summary>
            <param name="nameValues">键值对队列</param>
            <returns>Name-Value</returns>
        </member>
        <member name="T:Phenix.Core.Data.Expressions.OperationExpression">
            <summary>
            运算表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.OperationExpression.Compute``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            运算表达式
            </summary>
            <param name="valueLambda">值 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.OperationExpression.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            In
            </summary>
            <param name="insidePropertyLambda">内实体属性的 lambda 表达式</param>
            <param name="insideCriteriaLambda">内条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.OperationExpression.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            In
            </summary>
            <param name="insidePropertyLambda">内实体属性的 lambda 表达式</param>
            <param name="insideCriteriaExpression">内条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.OperationExpression.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            NotIn
            </summary>
            <param name="insidePropertyLambda">内实体属性的 lambda 表达式</param>
            <param name="insideCriteriaLambda">内条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.OperationExpression.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            NotIn
            </summary>
            <param name="insidePropertyLambda">内实体属性的 lambda 表达式</param>
            <param name="insideCriteriaExpression">内条件表达式</param>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OperationExpression.OwnerTypeAssemblyQualifiedName">
            <summary>
            所属类程序集限定名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OperationExpression.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OperationExpression.MemberName">
            <summary>
            属性/字段名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OperationExpression.MemberInfo">
            <summary>
            类属性/类字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OperationExpression.MemberType">
            <summary>
            类属性/类字段类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OperationExpression.LeftOperation">
            <summary>
            运算表达式左
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OperationExpression.Sign">
            <summary>
            运算符号
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OperationExpression.RightOperation">
            <summary>
            运算表达式右
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OperationExpression.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OperationExpression.HaveValue">
            <summary>
            是否存在值
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OperationExpression.ValueType">
            <summary>
            值的类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OperationExpression.Arguments">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.OperationExpression.Compute``1(``0)">
            <summary>
            运算表达式
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.OperationExpression.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.OperationExpression.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.OperationExpression.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Expressions.OperationSign">
            <summary>
            运算符号
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.OperationSign.None">
            <summary>
            无 
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.OperationSign.Add">
            <summary>
            +
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.OperationSign.Subtract">
            <summary>
            -
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.OperationSign.Multiply">
            <summary>
            *
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.OperationSign.Divide">
            <summary>
            /
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.OperationSign.Length">
            <summary>
            字符数
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.OperationSign.ToLower">
            <summary>
            转换为小写形式
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.OperationSign.ToUpper">
            <summary>
            转换为大写形式
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.OperationSign.TrimStart">
            <summary>
            去除字符串左边的空格
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.OperationSign.TrimEnd">
            <summary>
            去除字符串右边的空格
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.OperationSign.Trim">
            <summary>
            去除字符串左右两边的空格
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.OperationSign.Substring">
            <summary>
            截取字符串
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Expressions.Order">
            <summary>
            顺序
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.Order.Ascending">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Expressions.Order.Descending">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Expressions.OrderBy`1">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OrderBy`1.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OrderBy`1.Order">
            <summary>
            顺序
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Expressions.OrderBy`1.Prior">
            <summary>
            先前
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.OrderBy`1.Ascending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            升序
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.OrderBy`1.Descending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            降序
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.OrderBy`1.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.OrderBy`1.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Expressions.OrderBy`1.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Increment">
            <summary>
            64位增量
            </summary> 
        </member>
        <member name="P:Phenix.Core.Data.Increment.Database">
            <summary>
            数据库入口
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Increment.GetNext(System.String,System.Int64)">
            <summary>
            取下一个
            </summary>
            <param name="key">键</param>
            <param name="initialValue">初值</param>
            <returns>值</returns>
        </member>
        <member name="T:Phenix.Core.Data.Model.EntityBase`1">
            <summary>
            实体基类
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.#ctor(System.String)">
            <summary>
            for Newtonsoft.Json.JsonConstructor
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.New(System.String,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            新增实体对象(自动填充主键和保留字段)
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.New(System.String,System.Int64,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            新增实体对象(自动填充保留字段)
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="primaryKeyLong">主键值</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.New(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增实体对象(自动填充主键和保留字段)
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.New(System.String,System.Int64,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增实体对象(自动填充保留字段)
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="primaryKeyLong">主键值</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.New(Phenix.Core.Data.Database,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            新增实体对象(自动填充主键和保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.New(Phenix.Core.Data.Database,System.Int64,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            新增实体对象(自动填充保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="primaryKeyLong">主键值</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.New(Phenix.Core.Data.Database,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增实体对象(自动填充主键和保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.New(Phenix.Core.Data.Database,System.Int64,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增实体对象(自动填充保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="primaryKeyLong">主键值</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchRoot(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchRoot(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchRoot(System.String,Phenix.Core.Data.Expressions.CriteriaExpression,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchRoot(System.String,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchRoot(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchRoot(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchRoot(Phenix.Core.Data.Database,Phenix.Core.Data.Expressions.CriteriaExpression,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchRoot(Phenix.Core.Data.Database,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchRoot(Phenix.Core.Data.Schema.Sheet,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="selfSheet">操作单子</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchRoot(Phenix.Core.Data.Schema.Sheet,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="selfSheet">操作单子</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchRoot(Phenix.Core.Data.Schema.Sheet,Phenix.Core.Data.Expressions.CriteriaExpression,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="selfSheet">操作单子</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchRoot(Phenix.Core.Data.Schema.Sheet,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Func{`0})">
            <summary>
            获取根实体对象
            </summary>
            <param name="selfSheet">操作单子</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchAll(System.String,Phenix.Core.Data.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchAll(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Data.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchAll(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchAll(System.String,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchAll(System.String,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchAll(Phenix.Core.Data.Database,Phenix.Core.Data.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchAll(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Data.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchAll(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchAll(Phenix.Core.Data.Database,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchAll(Phenix.Core.Data.Database,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.OrderBy{`0}[])">
            <summary>
            获取全部实体对象
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="F:Phenix.Core.Data.Model.EntityBase`1._dataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.EntityBase`1.DataSourceKey">
            <summary>
            数据源键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.EntityBase`1.Database">
            <summary>
            数据库入口
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.EntityBase`1.SelfSheet">
            <summary>
            操作单子
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.EntityBase`1.PrimaryKeyProperty">
            <summary>
            主键表字段映射类属性
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.EntityBase`1.TargetTable">
            <summary>
            持久化表
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.EntityBase`1.Root">
            <summary>
            根实体
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.EntityBase`1.IsRoot">
            <summary>
            是根实体
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.EntityBase`1.Master">
            <summary>
            主实体
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.EntityBase`1.PrimaryKeyLong">
            <summary>
            主键值
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FillReservedFields(Phenix.Core.Data.ExecuteAction)">
            <summary>
            填充保留字段
            </summary>
            <param name="executeAction">执行动作</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.InitializeSelf">
            <summary>
            初始化自己
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.NewDetail``1(Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            新增从实体对象(自动填充主键和保留字段)
            </summary>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.NewDetail``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增从实体对象(自动填充主键和保留字段)
            </summary>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchDetails``1(Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchDetails``1(System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchDetails``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchDetails``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchDetails``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchDetails``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchDetails``1(Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchDetails``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchDetails``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.FetchDetails``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取从实体对象
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.InsertSelf">
            <summary>
            新增自己
            </summary>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.InsertSelf(System.Data.Common.DbConnection)">
            <summary>
            新增自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.InsertSelf(System.Data.Common.DbTransaction)">
            <summary>
            新增自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            获取属性信息
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.SetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.SetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            设置属性值
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="valueLambda">值 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            设置属性值
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="valueLambda">值 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.Apply(Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            应用属性值
            </summary>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.Apply(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            应用属性值
            </summary>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.GetDirtValues(`0)">
            <summary>
            提取脏属性值
            </summary>
            <param name="source">数据源</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(`0,System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="source">数据源</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(Phenix.Core.Data.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.AppendCriteriaForDeleteSelf(Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            为删除自己追加条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.DeleteSelf(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.Ascending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            升序
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.EntityBase`1.Descending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            降序
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
        </member>
        <member name="T:Phenix.Core.Data.Model.IEntity">
            <summary>
            实体接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.IEntity.Database">
            <summary>
            数据库入口
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.IEntity.SelfSheet">
            <summary>
            操作单子
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.IEntity.Root">
            <summary>
            根实体
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.IEntity.Master">
            <summary>
            主实体
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Model.TreeEntityBase`1">
            <summary>
            树实体基类
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.#ctor(System.String,System.Int64,System.Int64,System.Int64,System.Collections.Generic.IList{`0})">
            <summary>
            for Newtonsoft.Json.JsonConstructor
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.NewRoot(System.String,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            新增根实体对象(自动填充主键和保留字段)
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.NewRoot(System.String,System.Int64,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            新增根实体对象(自动填充保留字段)
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="id">主键值</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.NewRoot(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增根实体对象(自动填充主键和保留字段)
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.NewRoot(System.String,System.Int64,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增根实体对象(自动填充保留字段)
            </summary>
            <param name="dataSourceKey">数据源键</param>
            <param name="id">主键值</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.NewRoot(Phenix.Core.Data.Database,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            新增根实体对象(自动填充主键和保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.NewRoot(Phenix.Core.Data.Database,System.Int64,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            新增根实体对象(自动填充保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="id">主键值</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.NewRoot(Phenix.Core.Data.Database,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增根实体对象(自动填充主键和保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.NewRoot(Phenix.Core.Data.Database,System.Int64,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增根实体对象(自动填充保留字段)
            </summary>
            <param name="database">数据库入口</param>
            <param name="id">主键值</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Database,Phenix.Core.Data.Expressions.CriteriaExpression,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Database,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Schema.Sheet,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="selfSheet">操作单子</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Schema.Sheet,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="selfSheet">操作单子</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Schema.Sheet,Phenix.Core.Data.Expressions.CriteriaExpression,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="selfSheet">操作单子</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.FetchTree(Phenix.Core.Data.Schema.Sheet,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Func{`0})">
            <summary>
            获取整颗树
            </summary>
            <param name="selfSheet">操作单子</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="doCreate">如果没有该条件的实体对象则调用本函数新增并自动持久化</param>
            <returns>根实体对象</returns>
        </member>
        <member name="F:Phenix.Core.Data.Model.TreeEntityBase`1._id">
            <summary>
            主键属性(映射表ID字段)
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.TreeEntityBase`1.Id">
            <summary>
            主键属性(映射表ID字段)
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Model.TreeEntityBase`1._rootId">
            <summary>
            根节点ID(映射表Root_ID字段)
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.TreeEntityBase`1.RootId">
            <summary>
            根节点ID(映射表Root_ID字段)
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.TreeEntityBase`1.Root">
            <summary>
            根节点实体
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Model.TreeEntityBase`1._parentId">
            <summary>
            父节点ID(映射表Parent_ID字段)
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.TreeEntityBase`1.ParentId">
            <summary>
            父节点ID(映射表Parent_ID字段)
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.TreeEntityBase`1.Parent">
            <summary>
            主实体
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.TreeEntityBase`1.Children">
            <summary>
            儿孙
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Model.TreeEntityBase`1._allChildren">
            <summary>
            儿孙
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Model.TreeEntityBase`1.AllChildren">
            <summary>
            全部儿孙
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.AddChild(System.Func{`0})">
            <summary>
            添加子对象
            </summary>
            <param name="doCreate">调用本函数新增(子节点)</param>
            <returns>子节点</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.ChangeParent(`0)">
            <summary>
            更改父节点
            </summary>
            <param name="newParent">父节点</param>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.FindInBranch(System.Func{`0,System.Boolean})">
            <summary>
            在本枝杈中寻找
            </summary>
            <param name="criteria">匹配条件(节点,是否匹配)</param>
            <returns>节点</returns>
        </member>
        <member name="M:Phenix.Core.Data.Model.TreeEntityBase`1.DeleteBranch">
            <summary>
            删除本枝杈
            </summary>
            <returns>更新记录数</returns>
        </member>
        <member name="T:Phenix.Core.Data.Rule.AssociationDataException">
            <summary>
            关联数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.AssociationDataException.#ctor(System.Exception)">
            <summary>
            关联数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.AssociationDataException.#ctor(System.String,System.Exception)">
            <summary>
            关联数据异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.AssociationDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Rule.DivisibleAttribute">
            <summary>
            可整除某数
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.DivisibleAttribute.#ctor(System.Int32)">
            <summary>
            可整除某数
            </summary>
            <param name="into">某数</param>
        </member>
        <member name="P:Phenix.Core.Data.Rule.DivisibleAttribute.Into">
            <summary>
            某数
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.DivisibleAttribute.IsValid(System.Object)">
            <summary>
            检查有效性
            </summary>
            <param name="value">值</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:Phenix.Core.Data.Rule.DivisibleByAttribute">
            <summary>
            能被某数整除
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.DivisibleByAttribute.#ctor(System.Int32)">
            <summary>
            能被某数整除
            </summary>
            <param name="by">某数</param>
        </member>
        <member name="P:Phenix.Core.Data.Rule.DivisibleByAttribute.By">
            <summary>
            某数
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.DivisibleByAttribute.IsValid(System.Object)">
            <summary>
            检查有效性
            </summary>
            <param name="value">值</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:Phenix.Core.Data.Rule.IValidation">
            <summary>
            验证接口
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.IValidation.Validate(Phenix.Core.Data.ExecuteAction,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            验证上下文
            </summary>
            <param name="executeAction">执行动作</param>
            <param name="validationContext">上下文</param>
            <returns>包含失败的验证信息</returns>
        </member>
        <member name="T:Phenix.Core.Data.Rule.OutdatedDataException">
            <summary>
            数据过时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.OutdatedDataException.#ctor(System.Exception)">
            <summary>
            数据过时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.OutdatedDataException.#ctor(System.String,System.Exception)">
            <summary>
            数据过时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.OutdatedDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Rule.UniqueConstraintException">
            <summary>
            唯一约束异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.UniqueConstraintException.#ctor(System.Exception)">
            <summary>
            唯一约束异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.UniqueConstraintException.#ctor(System.String,System.String,System.Object)">
            <summary>
            唯一约束异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.UniqueConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Rule.ValidationException">
            <summary>
            数据验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.ValidationException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            数据验证异常
            </summary>
            <param name="key">键值</param>
            <param name="statusCode">状态码(1000以下为保留值)</param>
            <param name="innerException">内嵌异常</param>
        </member>
        <member name="M:Phenix.Core.Data.Rule.ValidationException.#ctor(System.String,System.Int32,System.String,System.Exception)">
            <summary>
            数据验证异常
            </summary>
            <param name="key">键值</param>
            <param name="statusCode">状态码(1000以下为保留值)</param>
            <param name="message">错误消息</param>
            <param name="innerException">内嵌异常</param>
        </member>
        <member name="M:Phenix.Core.Data.Rule.ValidationException.#ctor(Phenix.Core.Data.Rule.ValidationMessage,System.Exception)">
            <summary>
            数据验证异常
            </summary>
            <param name="validationMessage">数据验证消息</param>
            <param name="innerException">内嵌异常</param>
        </member>
        <member name="M:Phenix.Core.Data.Rule.ValidationException.#ctor(System.String,System.Int32,System.ComponentModel.DataAnnotations.ValidationResult,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
            <summary>
            数据验证异常
            </summary>
            <param name="key">键值</param>
            <param name="statusCode">状态码(1000以下为保留值)</param>
            <param name="validationResult">数据验证结果</param>
            <param name="validatingAttribute">数据验证标签</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Data.Rule.ValidationException.#ctor(System.String,System.Int32,System.String,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
            <summary>
            数据验证异常
            </summary>
            <param name="key">键值</param>
            <param name="statusCode">状态码(1000以下为保留值)</param>
            <param name="message">错误消息</param>
            <param name="validatingAttribute">数据验证标签</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Data.Rule.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Rule.ValidationException.ValidationMessage">
            <summary>
            数据验证消息
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Rule.ValidationMessage">
            <summary>
            数据验证消息
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.ValidationMessage.#ctor(System.String,System.Int32,System.String,Phenix.Core.Data.Rule.ValidationMessageType)">
            <summary>
            数据验证消息
            </summary>
            <param name="key">键值</param>
            <param name="statusCode">状态码(1000以下为保留值)</param>
            <param name="hint">提示</param>
            <param name="messageType">消息类型</param>
        </member>
        <member name="P:Phenix.Core.Data.Rule.ValidationMessage.Key">
            <summary>
            键值
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Rule.ValidationMessage.StatusCode">
            <summary>
            状态码(1000以下为保留值)
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Rule.ValidationMessage.Hint">
            <summary>
            提示
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Rule.ValidationMessage.MessageType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Rule.ValidationMessageType">
            <summary>
            数据验证消息类型
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Rule.ValidationMessageType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Rule.ValidationMessageType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Rule.ValidationMessageType.Stop">
            <summary>
            终止
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Rule.ValidationMessageType.Question">
            <summary>
            问题
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Rule.ValidationMessageType.Exclamation">
            <summary>
            提醒
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Rule.ValidationMessageType.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Rule.ValidationMessageType.Asterisk">
            <summary>
            脚注
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Rule.ValidationMessageType.Information">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Rule.ValidationResult">
            <summary>
            数据验证结果
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.ValidationResult.#ctor(System.String)">
            <summary>
            数据验证结果
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.ValidationResult.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Object,System.String)">
            <summary>
            数据验证结果
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Rule.ValidationResult.#ctor(Phenix.Core.Data.Rule.ValidationResult)">
            <summary>
            数据验证结果
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Rule.ValidationResult.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Schema.Column">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.FieldNameByTrimColumnName">
            <summary>
            字段名是否取自被整理的字段名(如果第1-PrefixCount位后是"_"则剔去其及之前的字符)
            默认：false
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.PrefixCount">
            <summary>
            前缀字符数
            默认：1-3
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.Owner">
            <summary>
            Owner
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.TableColumn">
            <summary>
            表字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.FullName">
            <summary>
            完整字段名(SheetName.Name)
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.Description">
            <summary>
            注释(中英文用‘|’分隔)
            Thread.CurrentThread.CurrentCulture.Name为非'zh-'时返回后半截
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.Nullable">
            <summary>
            Nullable
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.DataType">
            <summary>
            DataType
            不存在则返回 String.Empty
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.MappingType">
            <summary>
            映射类型
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.MappingTypeName">
            <summary>
            映射类型名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.IsUnicode">
            <summary>
            IsUnicode
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.DataDefault">
            <summary>
            DataDefault
            不存在则返回 String.Empty
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.DataLength">
            <summary>
            DataLength
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.DataPrecision">
            <summary>
            DataPrecision
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.DataScale">
            <summary>
            DataScale
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.IsPrimaryKey">
            <summary>
            是否主键（字段类型需是长整型15位以上精度，新增记录时自动填充Sequence.Default.Value）
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.ForeignKey">
            <summary>
            外键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.UniqueIndexes">
            <summary>
            唯一键索引队列
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.IsOriginatorColumn">
            <summary>
            是否"制单人"字段（字段类型需是字符串/长整型15位以上精度，新增记录时自动填充Identity.CurrentIdentity.User.Name/Id）
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.IsOriginateTimeColumn">
            <summary>
            是否"制单时间"字段（字段类型需是DateTime，新增记录时自动填充当前时间）
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.IsOriginateTeamsColumn">
            <summary>
            是否"制单团体"字段（字段类型需是字符串/长整型15位以上精度，新增记录时自动填充Identity.CurrentIdentity.User.RootTeams.Name/Id）
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.IsUpdaterColumn">
            <summary>
            是否"更新人"字段（字段类型需是字符串/长整型15位以上精度，更新记录时自动填充Identity.CurrentIdentity.User.Name/Id）
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.IsUpdateTimeColumn">
            <summary>
            是否"更新时间"字段（字段类型需是DateTime，更新记录时自动填充当前时间）
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.IsTimestampColumn">
            <summary>
            是否"时间戳"字段（字段类型需是长整型15位以上精度，更新记录时自动填充Sequence.Default.Value）
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.IsRouteColumn">
            <summary>
            是否HASH值路由增删改查数据库
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.IsWatermarkColumn">
            <summary>
            是否仅在insert时被提交
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.OverwritingOnUpdate">
            <summary>
            是否要在Update时被覆盖
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.PropertyName">
            <summary>
            类属性名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.FieldName">
            <summary>
            类字段名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Column.ParameterName">
            <summary>
            参数名
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Column.GetProperty(System.Type,System.Boolean)">
            <summary>
            获取字段映射类属性
            </summary>
            <param name="entityType">实体类</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>类属性</returns>
        </member>
        <member name="T:Phenix.Core.Data.Schema.ColumnAttribute">
            <summary>
            字段映射标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.ColumnAttribute.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ColumnAttribute.Name">
            <summary>
            字段名
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Schema.Field">
            <summary>
            数据映射字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Field.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Field.FieldInfo">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Field.OwnerSheet">
            <summary>
            所属单子
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Field.Column">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Field.GetValue">
            <summary>
            动态执行get函数的委托函数
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Field.Property">
            <summary>
            数据映射属性信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Field.Set``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            设置值
            </summary>
            <param name="entity">实体</param>
            <param name="valueLambda">值 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到Set函数时引发 InvalidOperationException; 如果为 false, 则在找不到Set函数时返回 false</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Field.Set``1(``0,System.Object,System.Boolean)">
            <summary>
            设置值
            </summary>
            <param name="entity">实体</param>
            <param name="value">值/OperationExpression</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到Set函数时引发 InvalidOperationException; 如果为 false, 则在找不到Set函数时返回 false</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Field.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Field.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Schema.ForeignKey">
            <summary>
            外键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.Owner">
            <summary>
            所属数据库架构
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.TableName">
            <summary>
            TableName
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.ColumnName">
            <summary>
            ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.Table">
            <summary>
            Table
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.PrimaryKeyTableName">
            <summary>
            主键TableName
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.PrimaryKeyColumnName">
            <summary>
            主键ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.ForeignKey.PrimaryKeyColumn">
            <summary>
            主键Column
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Schema.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Index.Owner">
            <summary>
            所属表
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Index.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Index.Unique">
            <summary>
            是唯一键
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Index.ColumnNames">
            <summary>
            字段名清单
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Schema.MetaData">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.MetaData.Database">
            <summary>
            数据库入口
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.MetaData.Tables">
            <summary>
            表清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.MetaData.Views">
            <summary>
            视图清单
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.RefreshCache">
            <summary>
            刷新缓存
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindSheet(System.String,System.Boolean)">
            <summary>
            检索表/视图
            </summary>
            <param name="name">表/视图名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindSheet(System.String,System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索表/视图
            </summary>
            <param name="name">表/视图名</param>
            <param name="doCreate">如果没有找到表/视图则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindSheet``1(System.Boolean)">
            <summary>
            检索表/视图
            </summary>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表/视图</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindSheet(System.Type,System.Boolean)">
            <summary>
            检索表/视图
            </summary>
            <param name="entityType">实体类</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表/视图</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindSheet``1(System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索表/视图
            </summary>
            <param name="doCreate">如果没有映射的表/视图则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表/视图</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindSheet(System.Type,System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索表/视图
            </summary>
            <param name="entityType">实体类</param>
            <param name="doCreate">如果没有映射的表/视图则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表/视图</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindTable``1(System.Boolean)">
            <summary>
            检索表
            </summary>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindTable(System.Type,System.Boolean)">
            <summary>
            检索表
            </summary>
            <param name="entityType">实体类</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindTable``1(System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索表
            </summary>
            <param name="doCreate">如果没有映射的表则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindTable(System.Type,System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索表
            </summary>
            <param name="entityType">实体类</param>
            <param name="doCreate">如果没有映射的表则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindTable(System.String,System.Boolean)">
            <summary>
            检索表
            </summary>
            <param name="tableName">表名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindTable(System.String,System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索表
            </summary>
            <param name="tableName">表名</param>
            <param name="doCreate">如果没有找到表则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindView``1(System.Boolean)">
            <summary>
            检索视图
            </summary>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>视图</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindView(System.Type,System.Boolean)">
            <summary>
            检索视图
            </summary>
            <param name="entityType">实体类</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>视图</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindView``1(System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索视图
            </summary>
            <param name="doCreate">如果没有映射的视图则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>视图</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindView(System.Type,System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索视图
            </summary>
            <param name="entityType">实体类</param>
            <param name="doCreate">如果没有映射的视图则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>视图</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindView(System.String,System.Boolean)">
            <summary>
            检索视图
            </summary>
            <param name="viewName">视图名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>视图</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.FindView(System.String,System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索视图
            </summary>
            <param name="viewName">视图名</param>
            <param name="doCreate">如果没有找到视图则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>视图</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.MetaData.ExtractViewTables(System.String)">
            <summary>
            提取视图中表队列
            </summary>
            <param name="viewText">视图文本</param>
            <returns>表队列</returns>
        </member>
        <member name="T:Phenix.Core.Data.Schema.Property">
            <summary>
            数据映射属性信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Property.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取属性信息
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Property.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Property.PropertyInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Property.OwnerSheet">
            <summary>
            所属单子
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Property.ColumnAttribute">
            <summary>
            字段映射标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Property.Column">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Property.Description">
            <summary>
            优先取 DisplayAttribute.Description(中英文用‘|’分隔)
            其次取 Column.Description
            最后取 PropertyName
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Property.ValidationAttributes">
            <summary>
            校验规则标签
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Property.GetValue">
            <summary>
            动态执行get函数的委托函数
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Property.Field">
            <summary>
            数据映射字段信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Property.Set``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            设置值
            </summary>
            <param name="entity">实体</param>
            <param name="valueLambda">值 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到Set函数时引发 InvalidOperationException; 如果为 false, 则在找不到Set函数时返回 false</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Property.Set``1(``0,System.Object,System.Boolean)">
            <summary>
            设置值
            </summary>
            <param name="entity">实体</param>
            <param name="value">值/OperationExpression</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到Set函数时引发 InvalidOperationException; 如果为 false, 则在找不到Set函数时返回 false</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Property.Validate(System.Object)">
            <summary>
            核对值的有效性
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Property.Validate``1(System.Object,``0)">
            <summary>
            核对值的有效性
            </summary>
            <param name="value">值</param>
            <param name="entity">实体</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Property.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Property.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Schema.Sheet">
            <summary>
            单子
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,Phenix.Core.Data.Schema.Column})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.#ctor(Phenix.Core.Data.Schema.MetaData,System.String,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.Owner">
            <summary>
            所属数据库架构
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.Description">
            <summary>
            注释(中英文用‘|’分隔)
            Thread.CurrentThread.CurrentCulture.Name为非'zh-'时返回后半截
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.Columns">
            <summary>
            字段清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.PrimaryKeyColumns">
            <summary>
            主键字段清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.ForeignKeyColumns">
            <summary>
            外键字段清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.OriginateTeamsColumns">
            <summary>
            制单团体字段清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.TimestampColumns">
            <summary>
            "时间戳"字段清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.RouteColumns">
            <summary>
            "HASH值路由增删改查数据库"字段清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Sheet.Handles">
            <summary>
            实际操作的单子(0为主库序号，1-N为分库序号)
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.GetHandle(System.Object)">
            <summary>
            获取实际操作的单子
            </summary>
            <param name="routeKey">路由键</param>
            <returns>Handles[routeKey != null ? Math.Abs(routeKey.GetHashCode()) % (Handles.Count + 1) : 0]</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.GetHandle``1(``0)">
            <summary>
            获取实际操作的单子(取实体的路由字段值作为路由键)
            </summary>
            <param name="entity">实体</param>
            <returns>Handles[routeKey != null ? Math.Abs(routeKey.GetHashCode()) % (Handles.Count + 1) : 0]</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.GetFields(System.Type,Phenix.Core.Data.Schema.Sheet,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            获取数据映射类字段(均映射的是遍历类时遇到的第一个符合条件的表)
            </summary>
            <param name="entityType">实体类</param>
            <param name="targetTable">所属表</param>
            <param name="isWatermarkColumn">是否仅在insert时被提交</param>
            <param name="overwritingOnUpdate">是否要在Update时被覆盖</param>
            <returns>类字段名-类字段</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.GetField(System.Type,System.String,System.Boolean)">
            <summary>
            获取数据映射类字段
            </summary>
            <param name="entityType">实体类</param>
            <param name="fieldName">字段名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>类字段</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.GetProperties(System.Type,Phenix.Core.Data.Schema.Sheet,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            获取数据映射类属性(均映射的是遍历类时遇到的第一个符合条件的表)
            </summary>
            <param name="entityType">实体类</param>
            <param name="targetTable">所属表</param>
            <param name="isWatermarkColumn">是否仅在insert时被提交</param>
            <param name="overwritingOnUpdate">是否要在Update时被覆盖</param>
            <returns>类字段名-类字段</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            获取数据映射类属性
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>类属性</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.GetProperty(System.Type,System.String,System.Boolean)">
            <summary>
            获取数据映射类属性
            </summary>
            <param name="entityType">实体类</param>
            <param name="propertyName">属性名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>类属性</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.GetPrimaryKeyProperty(System.Type,System.Boolean)">
            <summary>
            检索主键表字段映射类属性
            </summary>
            <param name="entityType">实体类</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>类属性</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.FindColumn(System.String,System.Boolean)">
            <summary>
            检索字段
            </summary>
            <param name="name">字段名/类属性名/类字段名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>字段</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.GetColumns(System.Boolean,System.Boolean)">
            <summary>
            获取字段清单
            </summary>
            <param name="isWatermarkColumn">是否仅在insert时被提交</param>
            <param name="overwritingOnUpdate">是否要在Update时被覆盖</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.Validate``1(``0,Phenix.Core.Data.ExecuteAction,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            核对有效性
            </summary>
            <param name="entity">实体</param>
            <param name="executeAction">执行动作</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.FillReservedFields``1(``0,Phenix.Core.Data.ExecuteAction)">
            <summary>
            填充保留字段
            </summary>
            <param name="entity">实体</param>
            <param name="executeAction">执行动作</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.FillReservedProperties(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},Phenix.Core.Data.ExecuteAction)">
            <summary>
            填充保留属性
            </summary>
            <param name="entityType">实体类</param>
            <param name="propertyValues">属性值队列</param>
            <param name="executeAction">执行动作</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.Apply``1(``0,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            应用属性值
            </summary>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.Apply``1(``0,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            应用属性值
            </summary>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.InsertEntity``1(``0)">
            <summary>
            新增记录
            </summary>
            <param name="entity">实体</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.InsertEntity``1(System.Data.Common.DbConnection,``0)">
            <summary>
            新增记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.InsertEntity``1(System.Data.Common.DbTransaction,``0)">
            <summary>
            新增记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.InsertEntity``1(System.Data.Common.DbCommand,``0)">
            <summary>
            新增记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.InsertRecord``1(Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.InsertRecord``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.InsertRecord``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.InsertRecord``1(System.Data.Common.DbCommand,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.InsertRecord``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.InsertRecord``1(System.Data.Common.DbConnection,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.InsertRecord``1(System.Data.Common.DbTransaction,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.InsertRecord``1(System.Data.Common.DbCommand,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbCommand,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbCommand,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbCommand,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord(Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord(System.Data.Common.DbCommand,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.NameValue[])">
            <summary>
            更新记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord(Phenix.Core.Data.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.UpdateRecord(System.Data.Common.DbCommand,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteEntity``1(``0,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="entity">实体</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteEntity``1(``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteEntity``1(``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbConnection,``0,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbConnection,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbConnection,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbTransaction,``0,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            删除记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteRecord(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            删除记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            删除记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteRecord(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            删除记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteRecord(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.DeleteRecord(System.Data.Common.DbCommand,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            删除记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1">
            <summary>
            获取记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection)">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction)">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.Common.DbCommand,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectEntity``1(System.Data.IDataReader,System.Boolean)">
            <summary>
            获取记录
            </summary>
            <param name="reader">IDataReader</param>
            <param name="first">是否返回第一条记录</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1">
            <summary>
            获取记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection)">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction)">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``1(System.Data.Common.DbCommand,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2">
            <summary>
            获取记录
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(Phenix.Core.Data.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection)">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction)">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord``2(System.Data.Common.DbCommand,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,System.Boolean,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.SelectRecord(System.Data.IDataReader,System.Boolean)">
            <summary>
            获取记录(JSON格式(仅返回匹配上本字段清单的属性值))
            </summary>
            <param name="reader">IDataReader</param>
            <param name="first">是否返回第一条记录</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.RecordCount``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            获取记录数
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.RecordCount(Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录数
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.RecordCount``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            获取记录数
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.RecordCount(System.Data.Common.DbConnection,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录数
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.RecordCount``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            获取记录数
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.RecordCount(System.Data.Common.DbTransaction,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录数
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.RecordCount(System.Data.Common.DbCommand,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录数
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>记录数</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Sheet.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Schema.SheetAttribute">
            <summary>
            表/视图映射标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.SheetAttribute.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="name">表名/视图名</param>
        </member>
        <member name="P:Phenix.Core.Data.Schema.SheetAttribute.Name">
            <summary>
            表名/视图名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.SheetAttribute.PrimaryKeyName">
            <summary>
            主键名
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Schema.Table">
            <summary>
            表
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Table.Owner">
            <summary>
            所属数据库架构
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Table.PrimaryKeys">
            <summary>
            主键清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Table.ForeignKeys">
            <summary>
            外键清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Table.DetailForeignKeys">
            <summary>
            子键清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Table.Indexes">
            <summary>
            索引清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Table.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.Table.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.Table.FindUniqueIndexes(System.String)">
            <summary>
            检索唯一键索引队列
            </summary>
            <param name="columnName">字段名</param>
            <returns>唯一键索引队列</returns>
        </member>
        <member name="T:Phenix.Core.Data.Schema.View">
            <summary>
            视图
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.View.ViewText">
            <summary>
            ViewText
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.View.Tables">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.View.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Schema.View.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Schema.View.FindTable(System.String)">
            <summary>
            检索表
            </summary>
            <param name="tableName">表名</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.View.FindTableColumn(System.String)">
            <summary>
            检索表字段
            </summary>
            <param name="columnAlias">字段别名</param>
            <returns>表字段</returns>
        </member>
        <member name="M:Phenix.Core.Data.Schema.View.FindTableColumn(System.String,System.String)">
            <summary>
            检索表字段
            </summary>
            <param name="tableName">表名</param>
            <param name="columnAlias">字段别名</param>
            <returns>表字段</returns>
        </member>
        <member name="T:Phenix.Core.Data.Sequence">
            <summary>
            64位序号
            由Database的PH7_SequenceMarker表保证序号的唯一性
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Sequence.ClearMarkerDeferMonths">
            <summary>
            清理几个月前的Marker
            默认：3(>=3)
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Sequence.Database">
            <summary>
            数据库入口
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Sequence.Value">
            <summary>
            值
            小于999999999999999
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Standards">
            <summary>
            规格
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Standards.Null">
            <summary>
            "null"
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Standards.CrLf">
            <summary>
            换行字串
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Standards.Separator">
            <summary>
            分隔字串" #-*-# "
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Standards.BlockSeparator">
            <summary>
            块分隔符
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Standards.FieldSeparator">
            <summary>
            字段分隔符
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Standards.RowSeparator">
            <summary>
            行分隔符
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Standards.ParamSeparator">
            <summary>
            参数分隔符'_'
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Standards.ValueSeparator">
            <summary>
            值分隔符','
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Standards.PointSeparator">
            <summary>
            标点分隔符'.'
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Standards.EqualSeparator">
            <summary>
            隶属分隔符'='
            </summary>
        </member>
        <member name="F:Phenix.Core.Data.Standards.UnknownValue">
            <summary>
            未知值"*"
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Standards.DefaultKeyColumnName">
            <summary>
            缺省"主键/外键"的 ColumnName
            默认：^ID$|^*_ID$
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Standards.DefaultOriginatorColumnName">
            <summary>
            缺省"制单人"的 ColumnName
            默认：^\w{0,3}_ORIGINATOR$
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Standards.DefaultOriginateTimeColumnName">
            <summary>
            缺省"制单时间"的 ColumnName
            默认：^\w{0,3}_ORIGINATE_TIME$
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Standards.DefaultOriginateTeamsColumnName">
            <summary>
            缺省"制单团体"的 ColumnName
            默认：^\w{0,3}_ORIGINATE_TEAMS$
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Standards.DefaultUpdaterColumnName">
            <summary>
            缺省"更新人"的 ColumnName
            默认：^\w{0,3}_UPDATER$
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Standards.DefaultUpdateTimeColumnName">
            <summary>
            缺省"更新时间"的 ColumnName
            默认：^\w{0,3}_UPDATE_TIME$
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Standards.DefaultTimestampColumnName">
            <summary>
            缺省"时间戳"的 ColumnName
            默认：^\w{0,3}_TIMESTAMP$
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Standards.DefaultRouteColumnName">
            <summary>
            缺省"HASH值路由增删改查数据库"的 ColumnName
            默认：^*_RU$
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Standards.DefaultWatermarkColumnName">
            <summary>
            缺省"仅在insert时被提交"的 ColumnName
            默认：^*_WM$
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Standards.DefaultEnumColumnName">
            <summary>
            缺省"枚举/布尔"的 ColumnName
            默认：^*_FG$
            </summary>
        </member>
        <member name="P:Phenix.Core.Data.Standards.IsNullSign">
            <summary>
            is null 标识
            默认：null
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Standards.IsDefaultKeyColumnName(System.String)">
            <summary>
            是否缺省"主键/外键"的 ColumnName（字段类型需是长整型15位以上精度）
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Standards.IsDefaultOriginatorColumnName(System.String)">
            <summary>
            是否缺省"制单人"的 ColumnName（字段类型需是字符串/长整型15位以上精度）
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Standards.IsDefaultOriginateTimeColumnName(System.String)">
            <summary>
            是否缺省"制单时间"的 ColumnName（字段类型需是DateTime）
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Standards.IsDefaultOriginateTeamsColumnName(System.String)">
            <summary>
            是否缺省"制单团体"的 ColumnName（字段类型需是字符串/长整型15位以上精度）
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Standards.IsDefaultUpdaterColumnName(System.String)">
            <summary>
            是否缺省"更新人"的 ColumnName（字段类型需是字符串/长整型15位以上精度）
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Standards.IsDefaultUpdateTimeColumnName(System.String)">
            <summary>
            是否缺省"更新时间"的 ColumnName（字段类型需是DateTime）
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Standards.IsDefaultTimestampColumnName(System.String)">
            <summary>
            是否缺省"时间戳"的 ColumnName（字段类型需是长整型15位以上精度）
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Standards.IsDefaultRouteColumnName(System.String)">
            <summary>
            是否缺省"HASH值路由增删改查数据库"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Standards.IsDefaultWatermarkColumnName(System.String)">
            <summary>
            是否缺省"仅在insert时被提交"的 ColumnName
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Standards.IsDefaultEnumColumnName(System.String)">
            <summary>
            是否缺省"枚举/布尔"的 ColumnName（字段类型需是整型2位/1位精度）
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Standards.TrimTableName(System.String,System.Int32)">
            <summary>
            整理表名
            如果第1-prefixCount位后是"_"则剔去其及之前的字符
            </summary>
            <param name="tableName">表名</param>
            <param name="prefixCount">前缀字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.Standards.GetPascalCasingByTableName(System.String,System.Boolean,System.Int32)">
            <summary>
            取PascalCasing名
            </summary>
            <param name="tableName">表名</param>
            <param name="trim">是否整理</param>
            <param name="prefixCount">前缀字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.Standards.GetPrefixByTableName(System.String,System.Int32)">
            <summary>
            取前缀
            </summary>
            <param name="tableName">表名</param>
            <param name="prefixCount">前缀字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.Standards.TrimViewName(System.String,System.Int32,System.Int32)">
            <summary>
            整理视图名
            如果第1-prefixCount位后是"_"则剔去其及之前的字符
            如果第suffixCount位前是"_"则剔去其及之后的字符
            </summary>
            <param name="viewName">视图名</param>
            <param name="prefixCount">前缀字符数</param>
            <param name="suffixCount">后缀字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.Standards.GetPascalCasingByViewName(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            取PascalCasing名
            </summary>
            <param name="viewName">视图名</param>
            <param name="trim">是否整理</param>
            <param name="prefixCount">前缀字符数</param>
            <param name="suffixCount">后缀字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.Standards.GetPrefixByViewName(System.String,System.Int32)">
            <summary>
            取前缀
            </summary>
            <param name="viewName">表名</param>
            <param name="prefixCount">前缀字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.Standards.TrimColumnName(System.String,System.Int32)">
            <summary>
            整理字段名
            如果第1-prefixCount位后是"_"则剔去其及之前的字符
            剔除DefaultRouteColumnName、DefaultWatermarkColumnName、DefaultEnumColumnName后缀
            </summary>
            <param name="columnName">字段名</param>
            <param name="prefixCount">前缀字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.Standards.GetPascalCasingByColumnName(System.String,System.Boolean,System.Int32)">
            <summary>
            取PascalCasing名
            </summary>
            <param name="columnName">字段名</param>
            <param name="trim">是否整理</param>
            <param name="prefixCount">前缀字符数</param>
        </member>
        <member name="M:Phenix.Core.Data.Standards.GetPropertyNameByFieldName(System.String)">
            <summary>
            取类属性名
            </summary>
            <param name="fieldName">类字段名</param>
        </member>
        <member name="M:Phenix.Core.Data.Standards.GetFieldNameByPropertyName(System.String)">
            <summary>
            取类字段名
            </summary>
            <param name="propertyName">类属性名</param>
        </member>
        <member name="M:Phenix.Core.Data.Standards.GetParameterNameByPropertyName(System.String)">
            <summary>
            取参数名
            </summary>
            <param name="propertyName">类属性名</param>
        </member>
        <member name="M:Phenix.Core.Data.Standards.GetStandardPropertyName(System.String)">
            <summary>
            取标准属性名(剔除后缀)
            </summary>
            <param name="binderName">类属性名/类字段名/参数名</param>
        </member>
        <member name="M:Phenix.Core.Data.Standards.ExtractCultureText(System.String,System.Globalization.CultureInfo)">
            <summary>
            提取本地文本
            </summary>
            <param name="text">文本(中英文用‘|’分隔)</param>
            <param name="cultureInfo">CultureInfo(Name为非'zh-'时返回后半截)</param>
        </member>
        <member name="T:Phenix.Core.DisposableBase`1">
            <summary>
            释放资源基类
            </summary>
        </member>
        <member name="P:Phenix.Core.DisposableBase`1.Default">
            <summary>
            单例
            </summary>
        </member>
        <member name="M:Phenix.Core.DisposableBase`1.DisposeManagedResources">
            <summary>
            释放托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.DisposableBase`1.DisposeUnmanagedResources">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="T:Phenix.Core.DisposableBase">
            <summary>
            释放资源基类
            </summary>
        </member>
        <member name="M:Phenix.Core.DisposableBase.Finalize">
            <summary>
            释放资源基类
            </summary>
        </member>
        <member name="P:Phenix.Core.DisposableBase.Disposing">
            <summary>
            正在释放中
            </summary>
        </member>
        <member name="M:Phenix.Core.DisposableBase.Dispose">
            <summary>
            释放自己
            </summary>
        </member>
        <member name="M:Phenix.Core.DisposableBase.Dispose(System.Boolean)">
            <summary>
            释放
            </summary>
            <param name="disposing">如果为 true, 则释放托管资源和非托管资源; 如果为 false, 则仅释放非托管资源</param>
        </member>
        <member name="M:Phenix.Core.DisposableBase.DisposeManagedResources">
            <summary>
            释放托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.DisposableBase.DisposeUnmanagedResources">
            <summary>
            释放非托管资源
            </summary>
        </member>
        <member name="M:Phenix.Core.DisposableBase.Close">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Phenix.Core.DisposableBase.TryDispose(System.Object)">
            <summary>
            尝试释放对象
            </summary>
            <param name="value">对象</param>
        </member>
        <member name="T:Phenix.Core.IO.CompressHelper">
            <summary>
            压缩助手
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.CompressHelper.Compress(System.ArraySegment{System.Byte})">
            <summary>
            压缩
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.CompressHelper.Compress(System.IO.Stream)">
            <summary>
            压缩
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.CompressHelper.Compress(System.IO.Stream,System.IO.Stream)">
            <summary>
            压缩
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.CompressHelper.Decompress(System.ArraySegment{System.Byte})">
            <summary>
            解压
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.CompressHelper.Decompress(System.IO.Stream)">
            <summary>
            解压
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.CompressHelper.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            解压
            </summary>
        </member>
        <member name="T:Phenix.Core.IO.FileChunkInfo">
            <summary>
            文件块信息
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.FileChunkInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.FileChunkInfo.#ctor(System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.ChunkCount">
            <summary>
            块数
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.ChunkNumber">
            <summary>
            块号
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.ChunkSize">
            <summary>
            块大小
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.MaxChunkSize">
            <summary>
            块最大值
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.ChunkBody">
            <summary>
            块体
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.Stop">
            <summary>
            是否终止
            </summary>
        </member>
        <member name="P:Phenix.Core.IO.FileChunkInfo.Over">
            <summary>
            是否结束
            </summary>
        </member>
        <member name="T:Phenix.Core.IO.IFileService">
            <summary>
            文件存取服务接口
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.IFileService.GetUploadPath(System.String,System.String)">
            <summary>
            获取上传文件的写入路径
            </summary>
            <param name="message">上传消息</param>
            <param name="fileName">上传文件名</param>
            <returns>写入路径</returns>
        </member>
        <member name="M:Phenix.Core.IO.IFileService.AfterUploadFile(System.String,System.String)">
            <summary>
            当完成上传文件时触发
            </summary>
            <param name="message">上传消息</param>
            <param name="targetPath">写入路径</param>
            <returns>完成上传时返回消息</returns>
        </member>
        <member name="M:Phenix.Core.IO.IFileService.GetDownloadPath(System.String,System.String)">
            <summary>
            获取下载文件的读取路径
            </summary>
            <param name="message">上传消息</param>
            <param name="fileName">下载文件名</param>
            <returns>读取路径</returns>
        </member>
        <member name="M:Phenix.Core.IO.IFileService.AfterDownloadFile(System.String,System.String)">
            <summary>
            当完成下载文件时触发
            </summary>
            <param name="message">上传消息</param>
            <param name="sourcePath">读取路径</param>
        </member>
        <member name="T:Phenix.Core.IO.StreamHelper">
            <summary>
            Stream助手
            </summary>
        </member>
        <member name="M:Phenix.Core.IO.StreamHelper.CopyBuffer(System.IO.Stream,System.IO.Stream)">
            <summary>
            拷贝数据
            </summary>
            <param name="sourceStream">数据源</param>
            <param name="targetStream">目的流</param>
        </member>
        <member name="M:Phenix.Core.IO.StreamHelper.CopyBuffer(System.IO.Stream)">
            <summary>
            拷贝数据
            </summary>
            <param name="sourceStream">数据源</param>
            <returns>目的字节串</returns>
        </member>
        <member name="T:Phenix.Core.Log.EventInfo">
            <summary>
            事件资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.EventInfo.#ctor(System.Int64,System.Reflection.MethodBase,System.String,System.String,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="id">ID</param>
            <param name="method">函数的信息</param>
            <param name="message">消息</param>
            <param name="address">地址</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventInfo.#ctor(System.Int64,System.Reflection.MethodBase,System.String,System.Int64,System.Int32,System.Exception)">
            <summary>
            初始化
            </summary>
            <param name="id">ID</param>
            <param name="method">函数的信息</param>
            <param name="message">消息</param>
            <param name="traceKey">调用链键值</param>
            <param name="traceOrder">调用链顺序</param>
            <param name="error">错误</param>
        </member>
        <member name="P:Phenix.Core.Log.EventInfo.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventInfo.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventInfo.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventInfo.MethodName">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventInfo.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventInfo.ExceptionName">
            <summary>
            错误名/消息名
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventInfo.ExceptionMessage">
            <summary>
            错误消息/补充消息
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventInfo.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventInfo.Address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventInfo.traceKey">
            <summary>
            调用链键值
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventInfo.traceOrder">
            <summary>
            调用链顺序
            </summary>
        </member>
        <member name="T:Phenix.Core.Log.EventLog">
            <summary>
            事件日志
            由Database.Default的PH7_EventLog_X表(按季度X为1~4)存储日志
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventLog.CurrentTableName">
            <summary>
            当前操作的表的表名
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventLog.CleanTableName">
            <summary>
            可被清理的表的表名
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventLog.LocalDirectory">
            <summary>
            存储目录
            默认：DateTime.Today.ToString("yyyyMMdd")
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventLog.BreakThresholdOfRepeatPerMinute">
            <summary>
            中断重复日志阈值(每分钟次数)
            默认：6000(>=6000)
            </summary>
        </member>
        <member name="P:Phenix.Core.Log.EventLog.Database">
            <summary>
            数据库入口
            </summary>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.String,System.Exception)">
            <summary>
            保存错误日志
            </summary>
            <param name="message">消息</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.String,System.String,System.Exception)">
            <summary>
            保存错误日志
            </summary>
            <param name="message">消息</param>
            <param name="address">地址</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.String,System.Int64,System.Int32,System.Exception)">
            <summary>
            保存错误日志
            </summary>
            <param name="message">消息</param>
            <param name="traceKey">调用链键值</param>
            <param name="traceOrder">调用链顺序</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.Reflection.MethodBase,System.String,System.Exception)">
            <summary>
            保存对象日志
            </summary>
            <param name="method">函数的信息</param>
            <param name="message">消息</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.Reflection.MethodBase,System.String,System.String,System.Exception)">
            <summary>
            保存对象日志
            </summary>
            <param name="method">函数的信息</param>
            <param name="message">消息</param>
            <param name="address">地址</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.Reflection.MethodBase,System.String,System.Int64,System.Int32,System.Exception)">
            <summary>
            保存对象日志
            </summary>
            <param name="method">函数的信息</param>
            <param name="message">消息</param>
            <param name="traceKey">调用链键值</param>
            <param name="traceOrder">调用链顺序</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.Int64,System.Reflection.MethodBase,System.String,System.Exception)">
            <summary>
            保存对象日志
            </summary>
            <param name="id">ID</param>
            <param name="method">函数的信息</param>
            <param name="message">消息</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.Int64,System.Reflection.MethodBase,System.String,System.String,System.Exception)">
            <summary>
            保存对象日志
            </summary>
            <param name="id">ID</param>
            <param name="method">函数的信息</param>
            <param name="message">消息</param>
            <param name="address">地址</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(System.Int64,System.Reflection.MethodBase,System.String,System.Int64,System.Int32,System.Exception)">
            <summary>
            保存对象日志
            </summary>
            <param name="id">ID</param>
            <param name="method">函数的信息</param>
            <param name="message">消息</param>
            <param name="traceKey">调用链键值</param>
            <param name="traceOrder">调用链顺序</param>
            <param name="error">错误</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.Save(Phenix.Core.Log.EventInfo)">
            <summary>
            保存对象日志
            </summary>
            <param name="info">事件资料</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.String,System.String)">
            <summary>
            保存错误日志到本地LocalDirectory目录
            </summary>
            <param name="message">消息</param>
            <param name="extension">后缀</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.String,System.Exception,System.String)">
            <summary>
            保存错误日志到本地LocalDirectory目录
            </summary>
            <param name="message">消息</param>
            <param name="error">错误</param>
            <param name="extension">后缀</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.Reflection.MethodBase,System.String,System.String)">
            <summary>
            保存对象日志到本地LocalDirectory目录
            </summary>
            <param name="method">函数的信息</param>
            <param name="message">消息</param>
            <param name="extension">后缀</param>
        </member>
        <member name="M:Phenix.Core.Log.EventLog.SaveLocal(System.Reflection.MethodBase,System.String,System.Exception,System.String)">
            <summary>
            保存对象日志到本地LocalDirectory目录
            </summary>
            <param name="method">函数的信息</param>
            <param name="message">消息</param>
            <param name="error">错误</param>
            <param name="extension">后缀</param>
        </member>
        <member name="T:Phenix.Core.Message.IMessageService">
            <summary>
            消息服务接口
            </summary>
        </member>
        <member name="M:Phenix.Core.Message.IMessageService.OnConnected(Phenix.Core.Security.Identity,System.String)">
            <summary>
            连接
            </summary>
            <param name="identity">当前用户身份</param>
            <param name="connectionId">连接ID</param>
        </member>
        <member name="M:Phenix.Core.Message.IMessageService.OnDisconnected(Phenix.Core.Security.Identity,System.String,System.Exception)">
            <summary>
            断开
            </summary>
            <param name="identity">当前用户身份</param>
            <param name="connectionId">连接ID</param>
            <param name="exception">Exception</param>
        </member>
        <member name="T:Phenix.Core.Message.UserMessage">
            <summary>
            用户消息
            由Database.Default的PH7_UserMessage表提供消息缓存
            </summary>
        </member>
        <member name="P:Phenix.Core.Message.UserMessage.ClearMessageDeferMonths">
            <summary>
            清理几个月前的消息
            默认：12(>=3)
            </summary>
        </member>
        <member name="P:Phenix.Core.Message.UserMessage.Database">
            <summary>
            数据库入口
            </summary>
        </member>
        <member name="M:Phenix.Core.Message.UserMessage.Send(System.String,System.String,System.String)">
            <summary>
            发送消息
            </summary>
            <param name="sender">发送用户</param>
            <param name="receiver">接收用户</param>
            <param name="content">消息内容</param>
        </member>
        <member name="M:Phenix.Core.Message.UserMessage.Send(Phenix.Core.Message.UserMessageInfo)">
            <summary>
            保存对象日志
            </summary>
            <param name="info">事件资料</param>
        </member>
        <member name="M:Phenix.Core.Message.UserMessage.Send(System.Data.Common.DbTransaction,Phenix.Core.Message.UserMessageInfo)">
            <summary>
            保存对象日志
            </summary>
            <param name="transaction">DbTransaction</param>
            <param name="info">事件资料</param>
        </member>
        <member name="M:Phenix.Core.Message.UserMessage.Receive(System.String)">
            <summary>
            接收消息（PULL）
            </summary>
            <param name="receiver">接收用户</param>
            <returns>结果集(消息ID-消息内容)</returns>
        </member>
        <member name="M:Phenix.Core.Message.UserMessage.Receive(System.Data.Common.DbConnection,System.String)">
            <summary>
            接收消息（PULL）
            </summary>
            <param name="connection">DbConnection</param>
            <param name="receiver">接收用户</param>
            <returns>结果集(消息ID-消息内容)</returns>
        </member>
        <member name="M:Phenix.Core.Message.UserMessage.AffirmReceived(System.Int64,System.Boolean)">
            <summary>
            确认收到
            </summary>
            <param name="id">消息ID</param>
            <param name="burn">是否销毁</param>
        </member>
        <member name="T:Phenix.Core.Message.UserMessageInfo">
            <summary>
            用户消息资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Message.UserMessageInfo.#ctor(System.Int64,System.String,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="id">ID</param>
            <param name="sender">发送用户</param>
            <param name="receiver">接收用户</param>
            <param name="content">消息内容</param>
        </member>
        <member name="M:Phenix.Core.Message.UserMessageInfo.#ctor(System.Int64,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="id">ID</param>
            <param name="createTime">创建时间</param>
            <param name="sendTime">发送时间</param>
            <param name="receivedTime">收到时间</param>
            <param name="sender">发送用户</param>
            <param name="receiver">接收用户</param>
            <param name="content">消息内容</param>
        </member>
        <member name="P:Phenix.Core.Message.UserMessageInfo.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Message.UserMessageInfo.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Message.UserMessageInfo.SendTime">
            <summary>
            发送时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Message.UserMessageInfo.ReceivedTime">
            <summary>
            收到时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Message.UserMessageInfo.Sender">
            <summary>
            发送用户
            </summary>
        </member>
        <member name="P:Phenix.Core.Message.UserMessageInfo.Receiver">
            <summary>
            接收用户
            </summary>
        </member>
        <member name="P:Phenix.Core.Message.UserMessageInfo.Content">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="M:Phenix.Core.Message.UserMessageInfo.Renew(System.String)">
            <summary>
            重新开始
            </summary>
            <param name="content">消息内容</param>
        </member>
        <member name="T:Phenix.Core.Net.Api.ApiConfig">
            <summary>
            WebAPI配置信息
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiSecurityGatePath">
            <summary>
            /api/security/gate
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiSecurityMyselfPath">
            <summary>
            /api/security/myself
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiSecurityMyselfPasswordPath">
            <summary>
            /api/security/myself/password
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiSecurityMyselfRootTeamsPath">
            <summary>
            /api/security/myself/root-teams
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiSecurityMyselfRootTeamsNodePath">
            <summary>
            /api/security/myself/root-teams-node
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiSecurityMyselfCompanyUserPath">
            <summary>
            /api/security/myself/company-user
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiSecurityPositionPath">
            <summary>
            /api/security/position
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiSecurityRolePath">
            <summary>
            /api/security/role
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiSecurityOneOffKeyPairPath">
            <summary>
            /api/security/one-off-key-pair
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiDataSequencePath">
            <summary>
            /api/data/sequence
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiDataIncrementPath">
            <summary>
            /api/data/increment
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiMessageGroupMessageHubPath">
            <summary>
            /api/message/group-message-hub
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiMessageUserMessagePath">
            <summary>
            /api/message/user-message
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiMessageUserMessageHubPath">
            <summary>
            /api/message/user-message-hub
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiInoutFilePath">
            <summary>
            /api/inout/file
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiLogEventLogPath">
            <summary>
            /api/log/event-log
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Api.ApiConfig.ApiServicePortalPath">
            <summary>
            /api/service/portal
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.Api.ControllerBase">
            <summary>
            控制器基类
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Api.ControllerBase.User">
            <summary>
            用户身份
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.Api.ControllerBase.EncryptAsync(System.Object)">
            <summary>
            加密
            Key/IV=登录口令/动态口令
            对应 phAjax.decrypt 函数
            </summary>
            <param name="data">需加密的对象/字符串</param>
        </member>
        <member name="M:Phenix.Core.Net.Api.ControllerBase.SelectRecord``1(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录(JSON格式)
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>DataPageInfo</returns>
        </member>
        <member name="M:Phenix.Core.Net.Api.ControllerBase.SelectRecord``1(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录(JSON格式)
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>DataPageInfo</returns>
        </member>
        <member name="M:Phenix.Core.Net.Api.ControllerBase.SelectRecord``1(Phenix.Core.Data.Database,Phenix.Core.Data.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录(JSON格式)
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>DataPageInfo</returns>
        </member>
        <member name="M:Phenix.Core.Net.Api.ControllerBase.SelectRecord``1(Phenix.Core.Data.Database,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录(JSON格式)
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>DataPageInfo</returns>
        </member>
        <member name="M:Phenix.Core.Net.Api.ControllerBase.SelectRecord``2(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录(JSON格式)
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>DataPageInfo</returns>
        </member>
        <member name="M:Phenix.Core.Net.Api.ControllerBase.SelectRecord``2(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录(JSON格式)
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>DataPageInfo</returns>
        </member>
        <member name="M:Phenix.Core.Net.Api.ControllerBase.SelectRecord``2(Phenix.Core.Data.Database,Phenix.Core.Data.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录(JSON格式)
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>DataPageInfo</returns>
        </member>
        <member name="M:Phenix.Core.Net.Api.ControllerBase.SelectRecord``2(Phenix.Core.Data.Database,Phenix.Core.Data.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Core.Data.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录(JSON格式)
            </summary>
            <param name="database">数据库入口</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>DataPageInfo</returns>
        </member>
        <member name="T:Phenix.Core.Net.Api.DataPageInfo`1">
            <summary>
            数据页信息
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.Api.DataPageInfo`1.#ctor(System.String,System.Int64,System.Int32,System.Int32,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Api.DataPageInfo`1.DataFormat">
            <summary>
            数据格式
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Api.DataPageInfo`1.DataName">
            <summary>
            数据名
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Api.DataPageInfo`1.DataSize">
            <summary>
            数据量
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Api.DataPageInfo`1.PageNo">
            <summary>
            页码(1..N, 0为不分页)
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Api.DataPageInfo`1.PageSize">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Api.DataPageInfo`1.PageBody">
            <summary>
            页体(JSON格式)
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.Filters.AuthorizationFilter">
            <summary>
            访问授权过滤器
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Filters.AuthorizationFilter.Paused">
            <summary>
            暂停
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Filters.AuthorizationFilter.PauseReason">
            <summary>
            暂停原因
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.Filters.AuthorizationFilter.OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            处理访问授权
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="M:Phenix.Core.Net.Filters.AuthorizationFilter.Pause(System.String)">
            <summary>
            暂停
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.Filters.AuthorizationFilter.Activate">
            <summary>
            激活
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.Filters.AuthorizationFilterAttribute">
            <summary>
            访问授权过滤器标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.Filters.AuthorizationFilterAttribute.CheckValidity(Phenix.Core.Security.Identity,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            检查有效性
            </summary>
            <param name="identity">用户身份</param>
            <param name="context">HttpContext</param>
        </member>
        <member name="T:Phenix.Core.Net.Filters.CompanyAdminFilterAttribute">
            <summary>
            公司管理员过滤器
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.Filters.CompanyAdminFilterAttribute.CheckValidity(Phenix.Core.Security.Identity,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            检查有效性
            </summary>
            <param name="identity">用户身份</param>
            <param name="context">HttpContext</param>
        </member>
        <member name="T:Phenix.Core.Net.Filters.ControllerRole">
            <summary>
            控制器的授权角色
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.Filters.ControllerRole.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.Filters.ControllerRole.Fetch(System.Reflection.TypeInfo,System.Reflection.MethodInfo)">
            <summary>
            获取控制器的授权角色
            </summary>
            <param name="typeInfo">TypeInfo</param>
            <param name="methodInfo">MethodInfo</param>
            <returns>控制器的授权角色</returns>
        </member>
        <member name="P:Phenix.Core.Net.Filters.ControllerRole.TypeInfo">
            <summary>
            方法所在类
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Filters.ControllerRole.MethodInfo">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Filters.ControllerRole._id">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Filters.ControllerRole.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Filters.ControllerRole._controllerName">
            <summary>
            Controller全名
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Filters.ControllerRole.ControllerName">
            <summary>
            Controller全名
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Filters.ControllerRole._actionName">
            <summary>
            Action名
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Filters.ControllerRole.ActionName">
            <summary>
            Action名
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.Filters.ControllerRole._roles">
            <summary>
            角色清单
            多个角色用‘|’分隔，互相为 or 关系
            多组角色个用‘,’分隔，互相为 and 关系
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Filters.ControllerRole.Roles">
            <summary>
            角色清单
            多个角色用‘|’分隔，互相为 or 关系
            多组角色个用‘,’分隔，互相为 and 关系
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Filters.ControllerRole.Filters">
            <summary>
            访问授权过滤器
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.Filters.ControllerRole.CheckValidityAsync(Phenix.Core.Security.Identity,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            检查有效性
            </summary>
            <param name="identity">用户身份</param>
            <param name="context">HttpContext</param>
        </member>
        <member name="T:Phenix.Core.Net.Filters.SystemAdminFilterAttribute">
            <summary>
            系统管理员过滤器
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.Filters.SystemAdminFilterAttribute.CheckValidity(Phenix.Core.Security.Identity,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            检查有效性
            </summary>
            <param name="identity">用户身份</param>
            <param name="context">HttpContext</param>
        </member>
        <member name="T:Phenix.Core.Net.Filters.ValidationFilter">
            <summary>
            数据验证过滤器标签
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.Filters.ValidationFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            处理数据验证
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="M:Phenix.Core.Net.Filters.ValidationFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            处理数据验证
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="T:Phenix.Core.Net.Filters.ValidationResult">
            <summary>
            数据验证结果
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.Filters.ValidationResult.#ctor(System.Int32,System.Collections.Generic.List{Phenix.Core.Data.Rule.ValidationMessage})">
            <summary>
            数据验证结果
            </summary>
            <param name="code">状态码(见StatusCodes)</param>
            <param name="errors">错误消息队列</param>
        </member>
        <member name="P:Phenix.Core.Net.Filters.ValidationResult.Code">
            <summary>
            状态码(见StatusCodes)
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.Filters.ValidationResult.Errors">
            <summary>
            错误消息队列
            </summary>
        </member>
        <member name="T:Phenix.Core.Net.Middleware.AuthenticationMiddleware">
            <summary>
            身份验证中间件
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.Middleware.AuthenticationMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            身份验证中间件
            </summary>
            <param name="next">下一个中间件</param>
        </member>
        <member name="M:Phenix.Core.Net.Middleware.AuthenticationMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            动态执行
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="T:Phenix.Core.Net.Middleware.ExceptionHandlerMiddleware">
            <summary>
            异常处理中间件
            </summary>
        </member>
        <member name="M:Phenix.Core.Net.Middleware.ExceptionHandlerMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            异常处理中间件
            </summary>
            <param name="next">下一个中间件</param>
        </member>
        <member name="M:Phenix.Core.Net.Middleware.ExceptionHandlerMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            动态执行
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="T:Phenix.Core.Net.NetConfig">
            <summary>
            网络配置信息
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.NetConfig.MethodOverrideHeaderName">
            <summary>
            X-HTTP-Method-Override
            </summary>
        </member>
        <member name="F:Phenix.Core.Net.NetConfig.AuthorizationHeaderName">
            <summary>
            Phenix-Authorization
            </summary>
        </member>
        <member name="P:Phenix.Core.Net.NetConfig.LocalAddress">
            <summary>
            本机IP地址
            </summary>
        </member>
        <member name="T:Phenix.Core.Plugin.IPlugin">
            <summary>
            插件接口
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.IPlugin.State">
            <summary>
            插件状态
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.IPlugin.Start">
            <summary>
            启动
            </summary>
            <returns>确定启动</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.IPlugin.Suspend">
            <summary>
            暂停
            </summary>
            <returns>确定停止</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.IPlugin.ReceiveMessage(System.Object)">
            <summary>
            接收消息
            </summary>
            <param name="message">消息</param>
            <returns>按需返回</returns>
        </member>
        <member name="T:Phenix.Core.Plugin.PluginBase">
            <summary>
            插件抽象类
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginBase.Owner">
            <summary>
            插件容器
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginBase.State">
            <summary>
            插件状态
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.FindPluginType(System.String,System.Boolean)">
            <summary>
            检索插件类
            </summary>
            <param name="assemblyName">程序集名称</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>插件类</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.FindPluginType(System.Reflection.Assembly,System.Boolean)">
            <summary>
            检索插件类
            </summary>
            <param name="assembly">程序集</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>插件类</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.Start">
            <summary>
            启动
            </summary>
            <returns>确定启动</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.Suspend">
            <summary>
            暂停
            </summary>
            <returns>确定停止</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.ReceiveMessage(System.Object)">
            <summary>
            接收消息
            </summary>
            <param name="message">消息</param>
            <returns>按需返回</returns>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginBase.SendMessage(System.Object)">
            <summary>
            发送消息
            </summary>
            <param name="message">消息</param>
            <returns>按需返回</returns>
        </member>
        <member name="T:Phenix.Core.Plugin.PluginHost">
            <summary>
            插件容器
            </summary>
        </member>
        <member name="P:Phenix.Core.Plugin.PluginHost.Default">
            <summary>
            单例
            </summary>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.GetPlugin(System.String,System.Func{Phenix.Core.Plugin.IPlugin,System.Object,System.Object})">
            <summary>
            获取插件
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="onMessage">插件发送过来的消息</param>
        </member>
        <member name="M:Phenix.Core.Plugin.PluginHost.GetPlugin(System.Reflection.Assembly,System.Func{Phenix.Core.Plugin.IPlugin,System.Object,System.Object})">
            <summary>
            获取插件
            </summary>
            <param name="assembly">程序集</param>
            <param name="onMessage">插件发送过来的消息</param>
        </member>
        <member name="T:Phenix.Core.Plugin.PluginState">
            <summary>
            插件状态
            </summary>
        </member>
        <member name="F:Phenix.Core.Plugin.PluginState.Created">
            <summary>
            构建
            </summary>
        </member>
        <member name="F:Phenix.Core.Plugin.PluginState.Initialized">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:Phenix.Core.Plugin.PluginState.Finalizing">
            <summary>
            终止化
            </summary>
        </member>
        <member name="F:Phenix.Core.Plugin.PluginState.Started">
            <summary>
            启动
            </summary>
        </member>
        <member name="F:Phenix.Core.Plugin.PluginState.Suspended">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:Phenix.Core.Reflection.DynamicCtorDelegate">
            <summary>
            动态执行构建函数的委托函数
            </summary>
        </member>
        <member name="T:Phenix.Core.Reflection.DynamicMethodDelegate">
            <summary>
            动态执行函数的委托函数
            </summary>
        </member>
        <member name="T:Phenix.Core.Reflection.DynamicMemberGetDelegate">
            <summary>
            动态执行get函数的委托函数
            </summary>
        </member>
        <member name="T:Phenix.Core.Reflection.DynamicMemberSetDelegate">
            <summary>
            动态执行set函数的委托函数
            </summary>
        </member>
        <member name="T:Phenix.Core.Reflection.DynamicInstanceFactory">
            <summary>
            动态实体工厂
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicInstanceFactory.Create``1">
            <summary>
            构造对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicInstanceFactory.Create(System.Type)">
            <summary>
            构造对象
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicInstanceFactory.GetConstructor(System.Type)">
            <summary>
            构造动态执行构建函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicInstanceFactory.CreateConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            动态执行构建函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicInstanceFactory.CreateMethod(System.Reflection.MethodInfo)">
            <summary>
            动态执行函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicInstanceFactory.CreatePropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            动态执行属性的get函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicInstanceFactory.CreatePropertySetter(System.Reflection.PropertyInfo)">
            <summary>
            动态执行属性的set函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicInstanceFactory.CreateFieldGetter(System.Reflection.FieldInfo)">
            <summary>
            动态执行字段的get函数
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.DynamicInstanceFactory.CreateFieldSetter(System.Reflection.FieldInfo)">
            <summary>
            动态执行字段的set函数
            </summary>
        </member>
        <member name="T:Phenix.Core.Reflection.Utilities">
            <summary>
            工具集
            </summary>
        </member>
        <member name="F:Phenix.Core.Reflection.Utilities.JsonDateFormatString">
            <summary>
            Json时间格式
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadAssembly(System.String,System.Boolean)">
            <summary>
            加载程序集
            </summary>
            <param name="assemblyName">程序集名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>程序集</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.AssembleFullTypeName(System.String,System.String)">
            <summary>
            拼装完整类名 = 命名空间.类名
            当typeName中存在命名空间时返回值不变
            </summary>
            <param name="typeNamespace">命名空间</param>
            <param name="typeName">类名</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.ExtractTypeNamespace(System.String)">
            <summary>
            抽取命名空间
            </summary>
            <param name="fullTypeName">完整类名 </param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.ExtractTypeName(System.String)">
            <summary>
            抽取类名
            </summary>
            <param name="fullTypeName">完整类名 </param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetExportedSubclassTypes(System.Collections.Generic.IList{System.Type},System.Type[])">
             <summary>
             从类型集合中摘取派生类型
             </summary>
            <param name="sourceTypes">类型集合</param>
            <param name="baseTypes">基础类型、Interface</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadExportedSubclassTypesFromBaseDirectory(System.Type[])">
            <summary>
            从基础目录中加载派生类型
            </summary>
            <param name="baseTypes">基础类型、Interface</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadExportedSubclassTypesFromBaseDirectory(System.Boolean,System.Type[])">
            <summary>
            从基础目录中加载派生类型
            </summary>
            <param name="baseTypes">基础类型、Interface</param>
            <param name="includeAbstract">是否包括抽象类型</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadExportedSubclassTypes(System.String,System.Type[])">
            <summary>
            加载派生类型
            </summary>
            <param name="fileName">程序集文件名</param>
            <param name="baseTypes">基础类型、Interface</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadExportedSubclassTypes(System.String,System.Boolean,System.Type[])">
            <summary>
            加载派生类型
            </summary>
            <param name="fileName">程序集文件名</param>
            <param name="includeAbstract">是否包括抽象类型</param>
            <param name="baseTypes">基础类型、Interface</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadExportedClassTypesFromBaseDirectory(System.Boolean)">
            <summary>
            从基础目录中加载公共类类型
            </summary>
            <param name="includeAbstract">是否包括抽象类型</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadExportedClassTypes(System.String,System.Boolean)">
            <summary>
            加载公共类类型
            </summary>
            <param name="fileName">程序集文件名</param>
            <param name="includeAbstract">是否包括抽象类型</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetExportedClassTypes(System.Reflection.Assembly,System.Boolean)">
            <summary>
            获取公共类类型
            </summary>
            <param name="assembly">程序集</param>
            <param name="includeAbstract">是否包括抽象类型</param>
            <returns>类型队列</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadType(System.Type)">
            <summary>
            加载类型
            主要用于IDE环境、typeof(T)
            </summary>
            <param name="type">类</param>
            <returns>类</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.LoadType(System.String,System.String)">
            <summary>
            加载类型
            </summary>
            <param name="typeName">类名</param>
            <param name="assemblyName">程序集名</param>
            <returns>类</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetUnderlyingType(System.Type)">
            <summary>
            返回基础类型
            </summary>
            <param name="type">类</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetCoreType(System.Type)">
            <summary>
            返回数据源的核心类型
            </summary>
            <param name="type">类</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.FindListItemType(System.Type)">
            <summary>
            返回队列项类型
            </summary>
            <param name="type">类</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.FindKnownTypes(System.Object,System.Type)">
            <summary>
            返回队列项类型
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.ChangeType(System.Object,System.Type)">
            <summary>
            返回具有指定 resultType 类型而且其值等效于指定对象的值
            </summary>
            <param name="value">值</param>
            <param name="resultType">返回值的类型</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.ConvertToDbValue(System.Object,System.Boolean)">
            <summary>
            返回与数据库字段类型匹配的值
            </summary>
            <param name="value">值</param>
            <param name="nullToDBNull">Null转换为DBNull</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.FindDetailListType(System.Type,System.String,System.Int32)">
            <summary>
            检索主从结构中符合条件的队列类型
            </summary>
            <param name="type">类</param>
            <param name="propertyName">属性名</param>
            <param name="levelNumber">层级数</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.FindFirstAbstractType(System.Type)">
            <summary>
            检索第一个抽象类
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.FindPropertyInfo(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            检索属性信息
            </summary>
            <param name="objectType">类</param>
            <param name="propertyName">属性名</param>
            <param name="bindingAttr">BindingFlags</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.FindFieldInfo(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            检索字段信息
            </summary>
            <param name="objectType">类</param>
            <param name="fieldName">字段名</param>
            <param name="bindingAttr">BindingFlags</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.FindMemberInfo(System.Type,System.String,System.Boolean)">
            <summary>
            检索属性/字段信息
            </summary>
            <param name="objectType">类</param>
            <param name="memberName">属性/字段名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            获取属性/字段的类型
            </summary>
            <param name="memberInfo">属性/字段信息</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetMemberValue``1(``0,System.String,System.Boolean)">
            <summary>
            获取属性/字段的值
            </summary>
            <param name="entity">实体</param>
            <param name="memberName">属性/字段名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetMemberValue``1(``0,System.Reflection.MemberInfo)">
            <summary>
            获取属性/字段的值
            </summary>
            <param name="entity">实体</param>
            <param name="memberInfo">属性/字段信息</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetPropertyInfo``1(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>
            检索类属性的信息
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <exception cref="T:System.ArgumentNullException">lambda</exception>
            <exception cref="T:System.ArgumentException">不存在成员访问</exception>
            <returns>类属性</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetPropertyInfo(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>
            检索类属性的信息
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <exception cref="T:System.ArgumentNullException">lambda</exception>
            <exception cref="T:System.ArgumentException">不存在成员访问</exception>
            <returns>类属性</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetFieldInfo``1(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>
            检索类字段的信息
            </summary>
            <param name="fieldLambda">含类字段的 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <exception cref="T:System.ArgumentNullException">lambda</exception>
            <exception cref="T:System.ArgumentException">不存在成员访问</exception>
            <returns>类属性</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetFieldInfo(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>
            检索类字段的信息
            </summary>
            <param name="fieldLambda">含类字段的 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <exception cref="T:System.ArgumentNullException">lambda</exception>
            <exception cref="T:System.ArgumentException">不存在成员访问</exception>
            <returns>类属性</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetMemberInfo``1(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>
            检索类属性/类字段的信息
            </summary>
            <param name="memberLambda">含类属性/类字段的 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <exception cref="T:System.ArgumentNullException">lambda</exception>
            <exception cref="T:System.ArgumentException">不存在成员访问</exception>
            <returns>类属性/类字段</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetMemberInfo(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>
            检索类属性/类字段的信息
            </summary>
            <param name="memberLambda">含类属性/类字段的 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <exception cref="T:System.ArgumentNullException">lambda</exception>
            <exception cref="T:System.ArgumentException">不存在成员访问</exception>
            <returns>类属性/类字段</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetMethodInfo(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>
            检索类方法的信息
            </summary>
            <param name="methodLambda">含类方法的 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 ArgumentException; 如果为 false, 则在找不到信息时返回 null</param>
            <exception cref="T:System.ArgumentNullException">lambda</exception>
            <exception cref="T:System.ArgumentException">不存在方法调用</exception>
            <returns>类方法</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.XmlSerialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="instance">实例</param>
            <returns>序列化文本(XML格式)</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.XmlDeserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="serializedText">序列化文本(XML格式)</param>
            <returns>对象</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.XmlDeserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="serializedText">序列化文本(XML格式)</param>
            <param name="objectType">对象类型</param>
            <returns>对象</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.JsonSerialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="instance">实例</param>
            <returns>序列化文本(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.JsonSerialize(System.Data.IDataReader,System.Boolean)">
            <summary>
            序列化(属性名为表/视图的字段名/别名)
            </summary>
            <param name="reader">IDataReader</param>
            <param name="first">是否返回第一条记录</param>
            <returns>序列化文本(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.JsonDeserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="serializedText">序列化文本(JSON格式)</param>
            <returns>对象</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.JsonDeserialize(System.String,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="serializedText">序列化文本(JSON格式)</param>
            <param name="objectType">对象类型</param>
            <returns>对象</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.JsonDeserialize(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="serializedText">序列化文本(JSON格式)</param>
            <returns>对象PropertyName-Value字典</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.JsonDeserializeList(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="serializedText">序列化文本(JSON格式)</param>
            <returns>对象PropertyName-Value字典List</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.IsZero(System.String)">
            <summary>
            是零
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.IsNumeric(System.String)">
            <summary>
            是数字
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.IsInteger(System.String)">
            <summary>
            是整数
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.Length(System.String,System.Boolean)">
            <summary>
            字符串长度
            </summary>
            <param name="value">值</param>
            <param name="isUnicode">是否Unicode</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.SubString(System.String,System.Int32,System.Boolean)">
            <summary>
            截取字符串
            </summary>
            <param name="value">值</param>
            <param name="length">截取长度</param>
            <param name="isUnicode">是否Unicode</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.CompareList(System.Collections.IList,System.Collections.IList)">
            <summary>
            比较List对象
            </summary>
            <param name="arrayA">对象A</param>
            <param name="arrayB">对象B</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.FillFieldValues``1(``0,``0,System.Boolean)">
            <summary>
            填充对象字段值
            </summary>
            <param name="source">数据源</param>
            <param name="target">目标对象</param>
            <param name="reset">重新设定</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.Save(System.IO.Stream,System.String)">
            <summary>
            保存对象
            </summary>
            <param name="sourceStream">数据源</param>
            <param name="path">文件名</param>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.GetFirstCustomAttribute``1(System.Type)">
            <summary>
            获取成员信息的标签
            </summary>
            <typeparam name="T">Attribute</typeparam>
            <param name="objectType">类</param>
            <returns>标签</returns>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.IsNotApplicationAssembly(System.Reflection.Assembly)">
            <summary>
            非应用系统类
            </summary>
        </member>
        <member name="M:Phenix.Core.Reflection.Utilities.IsNotApplicationType(System.Type)">
            <summary>
            非应用系统类
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Auth.MultiAddressRequestException">
            <summary>
            多终端请求禁止异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.MultiAddressRequestException.#ctor(System.Exception)">
            <summary>
            多终端请求禁止异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.MultiAddressRequestException.#ctor(System.String,System.Exception)">
            <summary>
            多终端请求禁止异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.MultiAddressRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Auth.MultiSessionRequestException">
            <summary>
            多会话请求禁止异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.MultiSessionRequestException.#ctor(System.Exception)">
            <summary>
            多会话请求禁止异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.MultiSessionRequestException.#ctor(System.String,System.Exception)">
            <summary>
            多会话请求禁止异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.MultiSessionRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Auth.OvertimeRequestException">
            <summary>
            服务请求超时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.OvertimeRequestException.#ctor(System.Int32)">
            <summary>
            服务请求超时异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.OvertimeRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Auth.PasswordComplexityException">
            <summary>
            口令复杂度验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.PasswordComplexityException.#ctor(System.String,System.Exception)">
            <summary>
            口令复杂度验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.PasswordComplexityException.#ctor(System.Int32,System.Int32)">
            <summary>
            口令复杂度验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.PasswordComplexityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Auth.TimestampException">
            <summary>
            时间戳异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.TimestampException.#ctor(System.Exception)">
            <summary>
            时间戳异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.TimestampException.#ctor(System.String,System.Exception)">
            <summary>
            多会话请求禁止异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.TimestampException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Auth.UserLockedException">
            <summary>
            用户账号锁定异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.UserLockedException.#ctor(System.Int32)">
            <summary>
            用户账号锁定异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.UserLockedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Auth.UserNotFoundException">
            <summary>
            用户找不到异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.UserNotFoundException.#ctor(System.Exception)">
            <summary>
            用户找不到异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.UserNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            用户找不到异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.UserNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Auth.UserVerifyException">
            <summary>
            用户身份验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.UserVerifyException.#ctor(System.Exception)">
            <summary>
            用户身份验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.UserVerifyException.#ctor(System.String,System.Exception)">
            <summary>
            用户身份验证异常
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Auth.UserVerifyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Cryptography.AesCryptoTextProvider">
            <summary>
            AES加解密字符串
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Encrypt(System.String,System.String)">
            <summary>
            加密
            IV等于Key且Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="sourceText">原文</param>
            <returns>密文(Base64字符串)</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Encrypt(System.String,System.String,System.String)">
            <summary>
            加密
            Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="sourceText">原文</param>
            <returns>密文(Base64字符串)</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Encrypt(System.Byte[],System.Byte[],System.String)">
            <summary>
            加密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="sourceText">原文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Decrypt(System.String,System.String)">
            <summary>
            解密
            IV等于Key且Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="cipherText">密文(Base64字符串)</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Decrypt(System.String,System.String,System.String)">
            <summary>
            解密
            Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="cipherText">密文(Base64字符串)</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Decrypt(System.String,System.Byte[])">
            <summary>
            解密
            IV等于Key
            </summary>
            <param name="key">密钥</param>
            <param name="cipherBuffer">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Decrypt(System.String,System.String,System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="cipherBuffer">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="cipherBuffer">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Decrypt(System.String,System.IO.Stream)">
            <summary>
            解密
            IV等于Key
            </summary>
            <param name="key">密钥</param>
            <param name="cipherStream">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Decrypt(System.String,System.String,System.IO.Stream)">
            <summary>
            解密
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="cipherStream">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.AesCryptoTextProvider.Decrypt(System.Byte[],System.Byte[],System.IO.Stream)">
            <summary>
            解密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="cipherStream">密文</param>
            <returns>原文</returns>
        </member>
        <member name="T:Phenix.Core.Security.Cryptography.DesCryptoTextProvider">
            <summary>
            DES加解密字符串
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.DesCryptoTextProvider.Encrypt(System.String,System.String)">
            <summary>
            加密
            IV等于Key且Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="sourceText">原文</param>
            <returns>密文(Base64字符串)</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.DesCryptoTextProvider.Encrypt(System.String,System.String,System.String)">
            <summary>
            加密
            Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="sourceText">原文</param>
            <returns>密文(Base64字符串)</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.DesCryptoTextProvider.Encrypt(System.Byte[],System.Byte[],System.String)">
            <summary>
            加密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="sourceText">原文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.DesCryptoTextProvider.Decrypt(System.String,System.String)">
            <summary>
            解密
            IV等于Key且Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="cipherText">密文(Base64字符串)</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.DesCryptoTextProvider.Decrypt(System.String,System.String,System.String)">
            <summary>
            解密
            Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="cipherText">密文(Base64字符串)</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.DesCryptoTextProvider.Decrypt(System.String,System.Byte[])">
            <summary>
            解密
            IV等于Key
            </summary>
            <param name="key">密钥</param>
            <param name="cipherBuffer">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.DesCryptoTextProvider.Decrypt(System.String,System.String,System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="cipherBuffer">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.DesCryptoTextProvider.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="cipherBuffer">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.DesCryptoTextProvider.Decrypt(System.String,System.IO.Stream)">
            <summary>
            解密
            IV等于Key
            </summary>
            <param name="key">密钥</param>
            <param name="cipherStream">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.DesCryptoTextProvider.Decrypt(System.String,System.String,System.IO.Stream)">
            <summary>
            解密
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="cipherStream">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.DesCryptoTextProvider.Decrypt(System.Byte[],System.Byte[],System.IO.Stream)">
            <summary>
            解密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="cipherStream">密文</param>
            <returns>原文</returns>
        </member>
        <member name="T:Phenix.Core.Security.Cryptography.KeyPair">
            <summary>
            公钥私钥对
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Cryptography.KeyPair.PublicKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Cryptography.KeyPair.PrivateKey">
            <summary>
            私钥
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Cryptography.MD5CryptoTextProvider">
            <summary>
            MD5加密字符串
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.MD5CryptoTextProvider.ComputeHash(System.String,System.Boolean)">
            <summary>
            取Hash字符串
            </summary>
            <param name="sourceText">原文</param>
            <param name="toUpper">返回大写字符串</param>
            <returns>Hash字符串</returns>
        </member>
        <member name="T:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider">
            <summary>
            Rijndael加解密字符串
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Encrypt(System.String,System.String)">
            <summary>
            加密
            IV等于Key且Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="sourceText">原文</param>
            <returns>密文(Base64字符串)</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Encrypt(System.String,System.String,System.String)">
            <summary>
            加密
            Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="sourceText">原文</param>
            <returns>密文(Base64字符串)</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Encrypt(System.Byte[],System.Byte[],System.String)">
            <summary>
            加密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="sourceText">原文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Decrypt(System.String,System.String)">
            <summary>
            解密
            IV等于Key且Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="cipherText">密文(Base64字符串)</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Decrypt(System.String,System.String,System.String)">
            <summary>
            解密
            Key和IV将被转换为MD5值
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="cipherText">密文(Base64字符串)</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Decrypt(System.String,System.Byte[])">
            <summary>
            解密
            IV等于Key
            </summary>
            <param name="key">密钥</param>
            <param name="cipherBuffer">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Decrypt(System.String,System.String,System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="cipherBuffer">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="cipherBuffer">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Decrypt(System.String,System.IO.Stream)">
            <summary>
            解密
            IV等于Key
            </summary>
            <param name="key">密钥</param>
            <param name="cipherStream">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Decrypt(System.String,System.String,System.IO.Stream)">
            <summary>
            解密
            </summary>
            <param name="key">密钥</param>
            <param name="IV">初始化向量</param>
            <param name="cipherStream">密文</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RijndaelCryptoTextProvider.Decrypt(System.Byte[],System.Byte[],System.IO.Stream)">
            <summary>
            解密
            </summary>
            <param name="rgbKey">密钥</param>
            <param name="rgbIV">初始化向量</param>
            <param name="cipherStream">密文</param>
            <returns>原文</returns>
        </member>
        <member name="T:Phenix.Core.Security.Cryptography.RSACryptoTextProvider">
            <summary>
            RSA加解密字符串
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.CreateKeyPair">
            <summary>
            生成公钥私钥对
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.CreateKeyPair(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            生成公钥私钥对
            </summary>
            <param name="cryptoServiceProvider">加密服务</param>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.Encrypt(System.String,System.String,System.Boolean)">
            <summary>
            加密
            </summary>
            <param name="publicKey">公钥</param>
            <param name="sourceText">原文</param>
            <param name="fOAEP">如果为 true，则使用OAEP填充（仅在运行Microsoft Windows XP或更高版本的计算机上可用）执行直接的RSA加密；否则，如果为false，则使用PKCS#1 1.5版填充</param>
            <returns>密文(Base64字符串)</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.Encrypt(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String,System.Boolean)">
            <summary>
            加密
            </summary>
            <param name="cryptoServiceProvider">加密服务</param>
            <param name="publicKey">公钥</param>
            <param name="sourceText">原文</param>
            <param name="fOAEP">如果为 true，则使用OAEP填充（仅在运行Microsoft Windows XP或更高版本的计算机上可用）执行直接的RSA加密；否则，如果为false，则使用PKCS#1 1.5版填充</param>
            <returns>密文(Base64字符串)</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.Decrypt(System.String,System.String,System.Boolean)">
            <summary>
            解密
            </summary>
            <param name="privateKey">私钥</param>
            <param name="cipherText">密文(Base64字符串)</param>
            <param name="fOAEP">如果为 true，则使用OAEP填充（仅在运行Microsoft Windows XP或更高版本的计算机上可用）执行直接的RSA加密；否则，如果为false，则使用PKCS#1 1.5版填充</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.Cryptography.RSACryptoTextProvider.Decrypt(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String,System.Boolean)">
            <summary>
            解密
            </summary>
            <param name="cryptoServiceProvider">加密服务</param>
            <param name="privateKey">私钥</param>
            <param name="cipherText">密文(Base64字符串)</param>
            <param name="fOAEP">如果为 true，则使用OAEP填充（仅在运行Microsoft Windows XP或更高版本的计算机上可用）执行直接的RSA加密；否则，如果为false，则使用PKCS#1 1.5版填充</param>
            <returns>原文</returns>
        </member>
        <member name="T:Phenix.Core.Security.Identity">
            <summary>
            用户身份
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Identity.UserProxyFactory">
            <summary>
            用户资料代理工厂
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Identity.RegisterFactory(Phenix.Core.Security.IUserProxyFactory)">
            <summary>
            注册工厂
            </summary>
            <param name="userProxyFactory">用户资料代理工厂</param>
        </member>
        <member name="P:Phenix.Core.Security.Identity.CacheDiscardIntervalHours">
            <summary>
            缓存丢弃间隔(小时)
            默认：1
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Identity.Fetch(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            获取用户身份
            </summary>
            <param name="userName">登录名</param>
            <param name="cultureName">区域性名称</param>
            <param name="cacheDiscardIntervalHours">缓存丢弃间隔(小时)</param>
            <returns>用户资料</returns>
        </member>
        <member name="P:Phenix.Core.Security.Identity.CurrentIdentity">
            <summary>
            当前用户身份
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Identity.Name">
            <summary>
            登录名
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Identity.CultureName">
            <summary>
            区域性名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Identity.UserProxy">
            <summary>
            用户资料代理
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Identity.RootTeamsProxy">
            <summary>
            团队资料代理
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Identity.PositionProxy">
            <summary>
            岗位资料代理
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Identity.Id">
            <summary>
            主键属性(映射表ID字段)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Identity.IsAuthenticated">
            <summary>
            已身份验证?
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Identity.AuthenticationType">
            <summary>
            身份验证类型
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.IPositionProxy">
            <summary>
            岗位资料代理接口
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IPositionProxy.IsInRole(System.String)">
            <summary>
            确定是否属于指定的角色
            </summary>
            <param name="role">角色</param>
            <returns>属于指定的角色</returns>
        </member>
        <member name="T:Phenix.Core.Security.ITeamsProxy">
            <summary>
            团体资料代理接口
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.IUserProxy">
            <summary>
            用户资料代理接口
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IUserProxy.IsValidLogon(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            核对登录有效性
            </summary>
            <param name="timestamp">时间戳(9位长随机数+ISO格式当前时间)</param>
            <param name="signature">签名(二次MD5登录口令/动态口令AES加密时间戳的Base64字符串)</param>
            <param name="tag">捎带数据(未解密, 默认是客户端当前时间)</param>
            <param name="requestAddress">服务请求方IP地址</param>
            <param name="requestSession">服务请求会话签名</param>
            <param name="throwIfNotConform">如果为 true, 账号无效或口令错误或口令失效时会抛出UserNotFoundException/UserLockedException/UserVerifyException异常而不是返回false</param>
            <returns>是否正确</returns>
        </member>
        <member name="M:Phenix.Core.Security.IUserProxy.IsValid(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            核对有效性
            </summary>
            <param name="timestamp">时间戳(9位长随机数+ISO格式当前时间)</param>
            <param name="signature">签名(二次MD5登录口令/动态口令AES加密时间戳的Base64字符串)</param>
            <param name="requestAddress">服务请求方IP地址</param>
            <param name="requestSession">服务请求会话签名</param>
            <param name="throwIfNotConform">如果为 true, 账号无效或口令错误或禁止多终端登录时会抛出UserNotFoundException/UserLockedException/UserVerifyException/UserMultiAddressRequestException异常而不是返回false</param>
            <returns>是否正确</returns>
        </member>
        <member name="M:Phenix.Core.Security.IUserProxy.Encrypt(System.Object)">
            <summary>
            加密
            Key/IV=登录口令/动态口令
            </summary>
            <param name="data">需加密的对象/字符串</param>
        </member>
        <member name="M:Phenix.Core.Security.IUserProxy.Decrypt(System.String)">
            <summary>
            解密
             Key/IV=登录口令/动态口令
            </summary>
            <param name="cipherText">密文(Base64字符串)</param>
        </member>
        <member name="T:Phenix.Core.Security.IUserProxyFactory">
            <summary>
            用户资料代理工厂接口
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IUserProxyFactory.FetchUserProxy(System.String)">
            <summary>
            获取用户资料代理
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Phenix.Core.Security.IUserProxyFactory.FetchTeamsProxy(System.Int64)">
            <summary>
            获取团体资料代理
            </summary>
            <param name="id">主键</param>
        </member>
        <member name="M:Phenix.Core.Security.IUserProxyFactory.FetchPositionProxy(System.Int64)">
            <summary>
            获取岗位资料代理
            </summary>
            <param name="id">主键</param>
        </member>
        <member name="T:Phenix.Core.Security.IUserService">
            <summary>
            用户资料服务接口
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.IUserService.OnRegistered(Phenix.Core.Security.User,System.String,System.String)">
            <summary>
            注册成功
            </summary>
            <param name="user">用户资料</param>
            <param name="initialPassword">初始口令</param>
            <param name="dynamicPassword">动态口令</param>
            <returns>返回消息</returns>
        </member>
        <member name="M:Phenix.Core.Security.IUserService.OnCheckIn(Phenix.Core.Security.User,System.String)">
            <summary>
            登记处理
            </summary>
            <param name="user">用户资料</param>
            <param name="dynamicPassword">动态口令</param>
            <returns>返回消息</returns>
        </member>
        <member name="M:Phenix.Core.Security.IUserService.OnLogon(Phenix.Core.Security.User,System.String)">
            <summary>
            登录完成
            Key/IV=登录口令/动态口令
            </summary>
            <param name="user">用户资料</param>
            <param name="tag">捎带数据(已解密, 默认是客户端当前时间)</param>
        </member>
        <member name="T:Phenix.Core.Security.Position">
            <summary>
            岗位资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Position.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.Position._id">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Position.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.Position._name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Position.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.Position._roles">
            <summary>
            角色清单
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Position.Roles">
            <summary>
            角色清单
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.Principal">
            <summary>
            用户
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Principal.#ctor(Phenix.Core.Security.Identity)">
            <summary>
            初始化
            </summary>
            <param name="identity">用户身份</param>
        </member>
        <member name="P:Phenix.Core.Security.Principal.CurrentPrincipal">
            <summary>
            当前用户
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Principal.Identity">
            <summary>
            用户身份
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Principal.System#Security#Principal#IPrincipal#Identity">
            <summary>
            用户身份
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Principal.IsInRoleAsync(System.String)">
            <summary>
            确定是否属于指定的角色
            </summary>
            <param name="role">角色</param>
            <returns>属于指定的角色</returns>
        </member>
        <member name="M:Phenix.Core.Security.Principal.IsInRole(System.String)">
            <summary>
            确定是否属于指定的角色
            </summary>
            <param name="role">角色</param>
            <returns>属于指定的角色</returns>
        </member>
        <member name="T:Phenix.Core.Security.Teams">
            <summary>
            团体资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Teams.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.Teams._name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.Teams.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.Teams.AppendCriteriaForDeleteSelf(Phenix.Core.Data.Expressions.CriteriaExpression)">
            <summary>
            为删除自己追加条件表达式
            </summary>
        </member>
        <member name="T:Phenix.Core.Security.User">
            <summary>
            用户资料
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.User.#ctor">
            <summary>
            for CreateInstance
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User.GuestUserName">
            <summary>
            Guest登录名
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User.SystemAdminUserName">
            <summary>
            系统管理员登录名
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.RequestFailureCountMaximum">
            <summary>
            服务请求失败次数极限
            默认：5(次>=3)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.RequestFailureLockedMinutes">
            <summary>
            服务请求失败锁定周期
            默认：30(分钟>=10)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.AllowMultiAddressRequest">
            <summary>
            允许多处终端发起请求
            默认：true
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.AllowMultiSessionRequest">
            <summary>
            允许多处会话发起请求
            默认：true
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.RequestOvertimeLimitMinutes">
            <summary>
            服务请求超时时限(与服务端时钟差值)
            默认：30(分钟>=10)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.BreakRequestIntensityPerMinute">
            <summary>
            中断服务请求强度阈值(每分钟次数)
            默认：6000(>=6000)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.PasswordLengthMinimum">
            <summary>
            口令长度最小值
            默认：6(个>=6)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.PasswordComplexityMinimum">
            <summary>
            口令复杂度最小值(含数字、大写字母、小写字母、特殊字符的种类)
            默认：3(个>=1)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.DynamicPasswordValidityMinutes">
            <summary>
            动态口令有效周期
            默认：10(分钟>=3)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.AllowRepeatTimestamp">
            <summary>
            允许时间戳重发
            默认：false
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._id">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._name">
            <summary>
            登录名
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.Name">
            <summary>
            登录名
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._phone">
            <summary>
            手机
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.Phone">
            <summary>
            手机
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._eMail">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.EMail">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._regAlias">
            <summary>
            注册昵称
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.RegAlias">
            <summary>
            注册昵称
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._regTime">
            <summary>
            注册时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.RegTime">
            <summary>
            注册时间
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._requestAddress">
            <summary>
            服务请求方IP地址
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.RequestAddress">
            <summary>
            服务请求方IP地址
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._requestSession">
            <summary>
            服务请求会话签名
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.RequestSession">
            <summary>
            服务请求会话签名
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._requestFailureCount">
            <summary>
            服务请求失败次数
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.RequestFailureCount">
            <summary>
            服务请求失败次数
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._requestFailureTime">
            <summary>
            服务请求失败时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.RequestFailureTime">
            <summary>
            服务请求失败时间
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._rootTeamsId">
            <summary>
            所属顶层团体ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.RootTeamsId">
            <summary>
            所属顶层团体ID
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._teamsId">
            <summary>
            所属团体ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.TeamsId">
            <summary>
            所属团体ID
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._positionId">
            <summary>
            担任岗位ID
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.PositionId">
            <summary>
            担任岗位ID
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._locked">
            <summary>
            是否锁定
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.Locked">
            <summary>
            是否锁定
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._lockedTime">
            <summary>
            锁定时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.LockedTime">
            <summary>
            锁定时间
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._disabled">
            <summary>
            是否注销
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.Disabled">
            <summary>
            是否注销
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._disabledTime">
            <summary>
            注销时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.DisabledTime">
            <summary>
            注销时间
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._password">
            <summary>
            登录口令(散列值)
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.Password">
            <summary>
            登录口令(散列值)
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._dynamicPassword">
            <summary>
            动态口令(散列值)
            为空时用登录口令
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.DynamicPassword">
            <summary>
            动态口令(散列值)
            为空时用登录口令
            </summary>
        </member>
        <member name="F:Phenix.Core.Security.User._dynamicPasswordCreateTime">
            <summary>
            动态口令生成时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.DynamicPasswordCreateTime">
            <summary>
            动态口令生成时间
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.IsSystemAdmin">
            <summary>
            是否系统管理员?
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.IsCompanyAdmin">
            <summary>
            是否公司管理员?
            </summary>
        </member>
        <member name="P:Phenix.Core.Security.User.IsAuthenticated">
            <summary>
            已身份验证?
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.User.Encrypt(System.Object)">
            <summary>
            加密
            Key/IV=登录口令/动态口令
            </summary>
            <param name="data">需加密的对象/字符串</param>
            <returns>密文(Base64字符串)</returns>
        </member>
        <member name="M:Phenix.Core.Security.User.Decrypt(System.String)">
            <summary>
            解密
             Key/IV=登录口令/动态口令
            </summary>
            <param name="cipherText">密文(Base64字符串)</param>
            <returns>原文</returns>
        </member>
        <member name="M:Phenix.Core.Security.User.IsValid(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            核对有效性
            </summary>
            <param name="timestamp">时间戳(9位长随机数+ISO格式当前时间)</param>
            <param name="signature">签名(二次MD5登录口令/动态口令AES加密时间戳的Base64字符串)</param>
            <param name="requestAddress">服务请求方IP地址</param>
            <param name="requestSession">服务请求会话签名</param>
            <param name="throwIfNotConform">如果为 true, 账号无效或口令错误或禁止多终端登录时会抛出UserNotFoundException/UserLockedException/UserVerifyException/UserMultiAddressRequestException异常而不是返回false</param>
            <returns>是否正确</returns>
        </member>
        <member name="M:Phenix.Core.Security.User.IsValidLogon(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            核对登录有效性
            </summary>
            <param name="timestamp">时间戳(9位长随机数+ISO格式当前时间)</param>
            <param name="signature">签名(二次MD5登录口令/动态口令AES加密时间戳的Base64字符串)</param>
            <param name="requestAddress">服务请求方IP地址</param>
            <param name="requestSession">服务请求会话签名</param>
            <param name="throwIfNotConform">如果为 true, 账号无效或口令错误或口令失效时会抛出UserNotFoundException/UserLockedException/UserVerifyException异常而不是返回false</param>
            <returns>是否正确</returns>
        </member>
        <member name="M:Phenix.Core.Security.User.EqualityNamePassword(System.String,System.String,System.Boolean)">
            <summary>
            比对登录名与口令
            </summary>
            <param name="name">登录名</param>
            <param name="password">登录口令</param>
            <param name="throwIfNotConform">如果为 true, 登录口令无效时会抛出PasswordComplexityException异常而不是返回false</param>
            <returns>是否正确</returns>
        </member>
        <member name="M:Phenix.Core.Security.User.IsValidPasswordComplexity(System.String,System.String,System.Boolean)">
            <summary>
            登录口令是否有效
            </summary>
            <param name="name">登录名</param>
            <param name="password">登录口令</param>
            <param name="throwIfNotConform">如果为 true, 登录口令无效时会抛出PasswordComplexityException异常而不是返回false</param>
            <returns>是否正确</returns>
        </member>
        <member name="M:Phenix.Core.Security.User.BuildPassword">
            <summary>
            构建登录口令
            </summary>
            <returns>登录口令</returns>
        </member>
        <member name="M:Phenix.Core.Security.User.ChangePassword(System.String,System.String,System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            修改登录口令
            </summary>
            <param name="password">登录口令</param>
            <param name="newPassword">新登录口令</param>
            <param name="hashPassword">登录口令需Hash</param>
            <param name="requestAddress">服务请求方IP地址</param>
            <param name="requestSession">服务请求会话签名</param>
            <param name="throwIfNotConform">如果为 true, 账号无效或口令不规范会抛出UserNotFoundException/UserLockedException/UserVerifyException/UserPasswordComplexityException异常而不是返回false</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Phenix.Core.Security.User.BuildDynamicPassword">
            <summary>
            构建动态口令
            </summary>
            <returns>动态口令</returns>
        </member>
        <member name="M:Phenix.Core.Security.User.ApplyDynamicPassword(System.String,System.Boolean)">
            <summary>
            申请动态口令
            </summary>
            <param name="requestAddress">服务请求方IP地址</param>
            <param name="throwIfNotConform">如果为 true, 核对有效性不符会抛出UserNotFoundException/UserLockedException异常而不是返回false</param>
            <returns>动态口令(6位数字一般作为验证码用短信发送给到用户)</returns>
        </member>
        <member name="M:Phenix.Core.Security.User.Activate">
            <summary>
            激活
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.User.Disable">
            <summary>
            注销
            </summary>
        </member>
        <member name="M:Phenix.Core.Security.User.Register(Phenix.Core.Data.Database,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String@,System.String@,System.Boolean)">
            <summary>
            注册
            </summary>
            <param name="database">Database</param>
            <param name="name">登录名</param>
            <param name="phone">手机(注册用可为空)</param>
            <param name="eMail">邮箱(注册用可为空)</param>
            <param name="regAlias">注册昵称(注册用可为空)</param>
            <param name="requestAddress">服务请求方IP地址</param>
            <param name="rootTeamsId">所属顶层团体ID</param>
            <param name="teamsId">所属团体ID</param>
            <param name="positionId">担任岗位ID</param>
            <param name="initialPassword">初始口令</param>
            <param name="dynamicPassword">动态口令</param>
            <param name="hashPassword">登录口令需Hash</param>
        </member>
        <member name="M:Phenix.Core.Security.User.IsReservedUserName(System.String)">
            <summary>
            是否保留登录名
            </summary>
            <param name="userName">登录名</param>
            <returns>保留登录名</returns>
        </member>
        <member name="T:Phenix.Core.SyncCollections.CachedObject`1">
            <summary>
            缓存对象
            </summary>
            <typeparam name="TValue">被缓存对象</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.CachedObject`1.#ctor(`0,System.DateTime)">
            <summary>
            初始化
            </summary>
            <param name="value">被缓存对象</param>
            <param name="invalidTime">失效时间</param>
        </member>
        <member name="P:Phenix.Core.SyncCollections.CachedObject`1.Value">
            <summary>
            被缓存对象
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.CachedObject`1.InvalidTime">
            <summary>
            失效时间
            </summary>
        </member>
        <member name="T:Phenix.Core.SyncCollections.ICachedObject">
            <summary>
            缓存对象接口
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.ICachedObject.InvalidTime">
            <summary>
            失效时间
            </summary>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedDictionary`2">
            <summary>
            表示键和值的集合
            支持 ICachedObject
            </summary>
            <typeparam name="TKey">字典中的键的类型</typeparam>
            <typeparam name="TValue">字典中的值的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.#ctor">
            <summary>
            初始化
            该实例为空且具有默认的初始容量, 并使用键类型的默认相等比较器
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.#ctor(System.Int32)">
            <summary>
            初始化
            该实例为空且具有指定的初始容量, 并为键类型使用默认的相等比较器
            </summary>
            <param name="capacity">可包含的初始元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素并为键类型使用默认的相等比较器
            </summary>
            <param name="dictionary">它的元素被复制到本实例中</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化
            该实例为空且具有默认的初始容量
            </summary>
            <param name="comparer">比较键时要使用的实现; 或者为 null, 以便为键类型使用默认的 EqualityComparer</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素
            </summary>
            <param name="dictionary">它的元素被复制到本实例中</param>
            <param name="comparer">比较键时要使用的实现; 或者为 null, 以便为键类型使用默认的 EqualityComparer</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化
            该实例为空且具有指定的初始容量
            </summary>
            <param name="capacity">可包含的初始元素数</param>
            <param name="comparer">比较键时要使用的实现; 或者为 null, 以便为键类型使用默认的 EqualityComparer</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Comparer">
            <summary>
            获取用于确定字典中的键是否相等
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Count">
            <summary>
            获取键/值对的数目
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Item(`0)">
            <summary>
            获取或设置与指定的键相关联的值
            </summary>
            <param name="key">要获取或设置的值的键</param>
            <returns>与指定的键相关联的值. 如果找不到指定的键, get 操作便会引发 KeyNotFoundException, 而 set 操作会创建一个具有指定键的新元素</returns>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Keys">
            <summary>
            获取键的集合, 为静态副本
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Values">
            <summary>
            获取值的集合, 为静态副本
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedDictionary`2.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            确定是否包含项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.ContainsKey(`0)">
            <summary>
            确定是否包含指定的键
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.ContainsValue(`1)">
            <summary>
            确定是否包含特定值
            </summary>
            <param name="value">要定位的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="value">当此方法返回值时, 如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会返回 item 参数的类型默认值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.GetValue(`0,System.Func{`1},System.Boolean,System.Boolean)">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">如果没有该键, 构建值的函数</param>
            <param name="lockCreate">构建值时加锁</param>
            <param name="reset">如果找到该键, 是否重置</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.GetValue(`0,System.Func{`1},System.Boolean,System.Func{`1,System.Boolean})">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">如果没有该键, 构建值的函数</param>
            <param name="lockCreate">构建值时加锁</param>
            <param name="reset">如果找到该键, 是否重置的函数(null代表false)</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.GetValue(`0,System.Func{System.Threading.Tasks.Task{`1}},System.Boolean,System.Boolean)">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">如果没有该键, 构建值的函数</param>
            <param name="lockCreate">构建值时加锁</param>
            <param name="reset">如果找到该键, 是否重置</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.GetValue(`0,System.Func{System.Threading.Tasks.Task{`1}},System.Boolean,System.Func{`1,System.Boolean})">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">如果没有该键, 构建值的函数</param>
            <param name="lockCreate">构建值时加锁</param>
            <param name="reset">如果找到该键, 是否重置的函数(null代表false)</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            添加项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.AddOnce(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            一次添加项(如果已含则不添加)
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Add(`0,`1)">
            <summary>
            将指定的键和值添加到字典中
            </summary>
            <param name="key">键</param>
            <param name="value">要添加的元素的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.AddOnce(`0,`1)">
            <summary>
            一次将指定的键和值添加到字典中(如果已含则不添加)
            </summary>
            <param name="key">键</param>
            <param name="value">要添加的元素的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            移除项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Remove(`0)">
            <summary>
            移除所指定的键的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Clear">
            <summary>
            移除所有的键和值
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.Clear(System.Action{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}})">
            <summary>
            移除所有的键和值
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.ReplaceValue(`0,System.Func{`1,`1})">
            <summary>
            替换值
            </summary>
            <param name="key">键</param>
            <param name="doReplace">替换值的函数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            从指定的数组索引开始, 将元素复制到一个数组中
            </summary>
            <param name="array">数组</param>
            <param name="arrayIndex">数组索引</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedHashSet`1">
            <summary>
            表示元素的集合
            </summary>
            <typeparam name="T">元素的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Comparer">
            <summary>
            获取用于确定元素是否相等
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Count">
            <summary>
            获取元素的数目
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Items">
            <summary>
            获取元素的集合, 为静态副本
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedHashSet`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Contains(`0)">
            <summary>
            确定是否包含指定的元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Add(`0)">
            <summary>
            添加元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Remove(`0)">
            <summary>
            移除元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.RemoveWhere(System.Predicate{`0})">
            <summary>
            移除与指定的谓词所定义的条件相匹配的所有元素
            </summary>
            <param name="match">用于定义要移除的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Clear">
            <summary>
            移除所有的元素
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Clear(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            移除所有节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            包含存在于该对象中、指定集合中或两者中的所有元素
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            仅包含该对象和指定集合中存在的元素
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除指定集合中的所有元素
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            仅包含存在于该对象中或存在于指定集合中的元素（但并非两者）
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            是否为指定集合的子集
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            是否为指定集合的超集
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            是否为指定集合的真超集
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            是否为指定集合的真子集
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            是否和指定的集合共享通用元素
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            是否和指定集合包含相同的元素
            </summary>
            <param name="other">指定集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.ToArray(System.Boolean)">
            <summary>
            将集合的元素复制到新数组中
            <param name="clearSource">并清空源</param>
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.CopyTo(`0[])">
            <summary>
            将整个集合复制到兼容的一维数组中, 从目标数组的开头开始放置
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
             将整个集合复制到兼容的一维数组中, 从目标数组的指定索引位置开始放置
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
            <param name="arrayIndex">array 中从零开始的索引，在此处开始复制</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedHashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            将一定范围的元素从当前集合复制到兼容的一维数组中, 从目标数组的指定索引位置开始放置
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
            <param name="arrayIndex">array 中从零开始的索引, 在此处开始复制</param>
            <param name="count">要复制的元素数</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedLinkedList`1">
            <summary>
            表示双向链表
            </summary>
            <typeparam name="T">指定链表的元素类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素并且其容量足以容纳所复制的元素数
            </summary>
            <param name="collection">它的元素被复制到本实例中</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Count">
            <summary>
            获取实际包含的节点数
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.First">
            <summary>
            获取第一个节点
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Last">
            <summary>
            获取最后一个节点
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Contains(`0)">
            <summary>
            确定是否包含指定的值
            </summary>
            <param name="value">要定位的值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Find(`0)">
            <summary>
            查找包含指定值的第一个节点
            </summary>
            <param name="value">要定位的值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.FindLast(`0)">
            <summary>
            查找包含指定值的最后一个节点
            </summary>
            <param name="value">要定位的值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            在指定的现有节点后添加指定的新节点
            </summary>
            <param name="node">要在其后插入新节点的节点</param>
            <param name="newNode">要添加的新节点</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
             在指定的现有节点后添加包含指定值的新节点
            </summary>
            <param name="node">要在其后插入新节点的节点</param>
            <param name="value">要添加的新节点的值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            在指定的现有节点前添加指定的新节点
            </summary>
            <param name="node">要在其前插入新节点的节点</param>
            <param name="newNode">要添加的新节点</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            在指定的现有节点前添加包含指定值的新节点
            </summary>
            <param name="node">要在其前插入新节点的节点</param>
            <param name="value">要添加的新节点的值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            在开头处添加指定的新节点
            </summary>
            <param name="node">要添加的新节点</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddFirst(`0)">
            <summary>
            在开头处添加包含指定值的新节点
            </summary>
            <param name="value">要添加的新节点的值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            在结尾处添加指定的新节点
            </summary>
            <param name="node">要添加的新节点</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.AddLast(`0)">
            <summary>
            在结尾处添加包含指定值的新节点
            </summary>
            <param name="value">要添加的新节点的值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            移除指定的节点
            </summary>
            <param name="node">要移除的节点</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Remove(`0)">
            <summary>
            移除指定值的第一个匹配项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.RemoveFirst">
            <summary>
            移除开头处的节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.RemoveLast">
            <summary>
            移除结尾处的节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Clear">
            <summary>
            移除所有节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.Clear(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            移除所有节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedLinkedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            从指定的数组索引开始, 将元素复制到一个数组中
            </summary>
            <param name="array">数组</param>
            <param name="arrayIndex">数组索引</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedList`1">
            <summary>
            表示可通过索引访问的对象的强类型列表
            提供用于对列表进行搜索、排序和操作的方法
            </summary>
            <typeparam name="T">列表中元素的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化
            该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素
            </summary>
            <param name="collection">一个集合, 其元素被复制到新列表中</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.#ctor(System.Int32)">
            <summary>
            初始化
            该实例为空并且具有指定的初始容量
            </summary>
            <param name="capacity">新列表最初可以存储的元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedList`1.Capacity">
            <summary>
            获取或设置该内部数据结构在不调整大小的情况下能够容纳的元素总数
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedList`1.Count">
            <summary>
            获取实际包含的元素数
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedList`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素
            </summary>
            <param name="index">要获得或设置的元素从零开始的索引</param>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedList`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Contains(`0)">
            <summary>
            确定是否包含特定值
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.BinarySearch(`0)">
            <summary>
            使用默认的比较器在整个已排序的当前集合中搜索元素, 并返回该元素从零开始的索引
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            使用指定的比较器在整个已排序的当前集合中搜索元素, 并返回该元素从零开始的索引
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            使用指定的比较器在已排序的当前集合中的某个元素范围中搜索元素, 并返回该元素从零开始的索引
            </summary>
            <param name="index">要搜索的范围从零开始的起始索引</param>
            <param name="count">要搜索的范围的长度</param>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.IndexOf(`0)">
            <summary>
            搜索指定的对象, 并返回整个集合中第一个匹配项的从零开始的索引
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.IndexOf(`0,System.Int32)">
            <summary>
            搜索指定的对象, 并返回集合中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
            <param name="index">从零开始的搜索的起始索引</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            搜索指定的对象, 并返回集合中从指定的索引开始并包含指定的元素数的元素范围内第一个匹配项的从零开始的索引
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
            <param name="index">从零开始的搜索的起始索引</param>
            <param name="count">要搜索的部分中的元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.LastIndexOf(`0)">
            <summary>
            搜索指定的对象, 并返回整个集合中最后一个匹配项的从零开始的索引
            </summary>
            <param name="item">要在集合中定位的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            搜索指定的对象, 并返回集合中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引
            </summary>
            <param name="item">要在集合中定位的对象. 对于引用类型, 该值可以为 null</param>
            <param name="index">向后搜索的从零开始的起始索引</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            搜索指定的对象, 并返回集合中包含指定的元素数并在指定索引处结束的元素范围内最后一个匹配项的从零开始的索引
            </summary>
            <param name="item">要在集合中定位的对象. 对于引用类型, 该值可以为 null</param>
            <param name="index">向后搜索的从零开始的起始索引</param>
            <param name="count">要搜索的部分中的元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Exists(System.Predicate{`0})">
            <summary>
            确定是否包含与指定谓词所定义的条件相匹配的元素
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            确定是否集合中的每个元素都与指定的谓词所定义的条件相匹配
            </summary>
            <param name="match">要据以检查元素的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Find(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回整个集合中的第一个匹配元素
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.FindAll(System.Predicate{`0})">
            <summary>
            检索与指定谓词定义的条件匹配的所有元素
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.FindIndex(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素, 并返回整个集合中第一个匹配元素的从零开始的索引
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素, 并返回整个集合中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引
            </summary>
            <param name="startIndex">从零开始的搜索的起始索引</param>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.FindLast(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素, 并返回整个集合中的最后一个匹配元素
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素, 并返回整个集合中最后一个匹配元素的从零开始的索引
            </summary>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            搜索与由指定谓词定义的条件相匹配的元素, 并返回集合中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引
            </summary>
            <param name="startIndex">向后搜索的从零开始的起始索引</param>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素, 并返回集合中包含指定元素个数、到指定索引结束的元素范围内最后一个匹配项的从零开始的索引
            </summary>
            <param name="startIndex">向后搜索的从零开始的起始索引</param>
            <param name="count">要搜索的部分中的元素数</param>
            <param name="match">用于定义要搜索的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Reverse">
            <summary>
            将整个集合中元素的顺序反转
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            将指定范围中元素的顺序反转
            </summary>
            <param name="index">要反转的范围的从零开始的起始索引.</param>
            <param name="count">要反转的范围内的元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Sort">
            <summary>
            使用默认比较器对整个集合中的元素进行排序
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Sort(System.Comparison{`0})">
            <summary>
            排序
            </summary>
            <param name="comparison">比较方法</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            排序
            </summary>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            排序
            </summary>
            <param name="index">要排序的范围的从零开始的起始索引</param>
            <param name="count">要排序的范围的长度</param>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Add(`0)">
            <summary>
            将对象添加到结尾处
            </summary>
            <param name="item">要添加的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.AddOnce(`0)">
            <summary>
            一次将对象添加到结尾处(如果已含则不添加)
            </summary>
            <param name="item">要添加的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将指定集合的元素添加到末尾
            </summary>
            <param name="collection">一个集合, 其元素应被添加末尾. 集合自身不允许为 null, 但它可以包含 null 的元素(如果类型 T 为引用类型)</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Insert(System.Int32,`0)">
            <summary>
            将元素插入集合的指定索引处
            </summary>
            <param name="index">从零开始的索引, 应在该位置插入 item</param>
            <param name="item">要插入的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将一个集合中的某个元素插入到集合的指定索引处
            </summary>
            <param name="index">应在此处插入新元素的从零开始的索引</param>
            <param name="collection">一个集合, 应将其元素插入到集合中. 该集合自身不允许为 null, 但它可以包含为 null 的元素(如果类型 T 为引用类型)</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Remove(`0)">
            <summary>
            从集合中移除特定对象的第一个匹配项
            </summary>
            <param name="item">要从集合中移除的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            移除与指定的谓词所定义的条件相匹配的所有元素
            </summary>
            <param name="match">用于定义要移除的元素应满足的条件</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.RemoveAt(System.Int32)">
            <summary>
            移除指定索引处的元素
            </summary>
            <param name="index">要移除的元素的从零开始的索引</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            移除一定范围的元素
            </summary>
            <param name="index">要移除的元素的范围从零开始的起始索引</param>
            <param name="count">要移除的元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Clear">
            <summary>
            移除所有元素
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.Clear(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            移除所有节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.TrimExcess">
            <summary>
            将容量设置为集合中的实际元素数目(如果该数目小于某个阈值)
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.ForEach(System.Action{`0})">
            <summary>
            对集合中每个元素执行指定操作
            </summary>
            <param name="action">要对集合中每个元素执行的委托</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            创建源集合中的元素范围的浅表副本
            </summary>
            <param name="index">范围开始处的从零开始的集合索引</param>
            <param name="count">范围中的元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.AsReadOnly">
            <summary>
            返回当前集合的只读包装
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.ToArray(System.Boolean)">
            <summary>
            将集合的元素复制到新数组中
            <param name="clearSource">并清空源</param>
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            将当前集合中的元素转换为另一种类型, 并返回包含转换后的元素的列表
            </summary>
            <typeparam name="TOutput">目标数组元素的类型</typeparam>
            <param name="converter">将每个元素从一种类型转换为另一种类型的委托</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.CopyTo(`0[])">
            <summary>
            将整个集合复制到兼容的一维数组中, 从目标数组的开头开始放置
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.CopyTo(`0[],System.Int32)">
            <summary>
             将整个集合复制到兼容的一维数组中, 从目标数组的指定索引位置开始放置
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
            <param name="arrayIndex">array 中从零开始的索引，在此处开始复制</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            将一定范围的元素从当前集合复制到兼容的一维数组中, 从目标数组的指定索引位置开始放置
            </summary>
            <param name="index">源集合中复制开始位置的从零开始的索引</param>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
            <param name="arrayIndex">array 中从零开始的索引, 在此处开始复制</param>
            <param name="count">要复制的元素数</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedMultiSortedList`1">
            <summary>
            表示可通过索引访问的对象的强类型列表
            提供用于对列表进行多维搜索、排序和操作的方法
            </summary>
            <typeparam name="T">列表中元素的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedMultiSortedList`1.ContainsKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            确定是否包含指定的键
            </summary>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedMultiSortedList`1.ContainsValue(`0)">
            <summary>
            确定是否包含特定值
            </summary>
            <param name="value">要定位的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedMultiSortedList`1.TryGetValue(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,`0@)">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="key">键</param>
            <param name="value">当此方法返回值时, 如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会返回 item 参数的类型默认值</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedQueue`1">
            <summary>
            表示对象的先进先出集合
            </summary>
            <typeparam name="T">指定队列中元素的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素并且其容量足以容纳所复制的元素数
            </summary>
            <param name="collection">其元素被复制到新的集合中的集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.#ctor(System.Int32)">
            <summary>
            初始化
            该实例为空并且具有指定的初始容量
            </summary>
            <param name="capacity">可包含的初始元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedQueue`1.Count">
            <summary>
            获取集合中包含的元素数
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.Contains(`0)">
            <summary>
            确定某元素是否在集合中
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.Peek">
            <summary>
            返回位于集合开始处的对象但不将其移除
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.TryPeek(`0@)">
            <summary>
            返回位于集合开始处的对象但不将其移除
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.Enqueue(`0)">
            <summary>
            将对象添加到集合的结尾处
            </summary>
            <param name="item">要添加到集合中的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.Dequeue">
            <summary>
            移除并返回位于集合开始处的对象
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.TryDequeue(`0@)">
            <summary>
            移除并返回位于集合开始处的对象
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.Clear">
            <summary>
            移除所有对象
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.Clear(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            移除所有节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.TrimExcess">
            <summary>
            如果元素数小于当前容量的 90%, 将容量设置为集合中的实际元素数
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.ToArray(System.Boolean)">
            <summary>
            将集合的元素复制到新数组中
            <param name="clearSource">并清空源</param>
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            从指定数组索引开始将集合中的元素复制到现有一维 Array 中
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
            <param name="arrayIndex">array 中从零开始的索引, 在此处开始复制</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2">
            <summary>
            表示按键排序的键/值对的集合
            支持 ICachedObject
            </summary>
            <typeparam name="TKey">字典中的键的类型</typeparam>
            <typeparam name="TValue">字典中的值的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.#ctor">
            <summary>
            初始化
            该实例为空, 并使用键类型的默认相等比较器
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素, 并使用键类型的默认编辑器
            </summary>
            <param name="dictionary">它的元素被复制到新的集合中</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            初始化
            该实例为空并使用指定的编辑器实现来比较键
            </summary>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素, 并使用指定的比较器
            </summary>
            <param name="dictionary">它的元素被复制到新的集合中</param>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Comparer">
            <summary>
            获取用于对集合的元素进行排序的比较器
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Count">
            <summary>
            获取包含在集合中的键/值对的数目
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Item(`0)">
            <summary>
            获取或设置与指定的键相关联的值
            </summary>
            <param name="key">要获取或设置的值的键</param>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Keys">
            <summary>
            获取键的集合, 为静态副本
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Values">
            <summary>
            获取值的集合, 为静态副本
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            确定是否包含项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.ContainsKey(`0)">
            <summary>
            确定是否包含指定的键
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.ContainsValue(`1)">
            <summary>
            确定是否包含特定值
            </summary>
            <param name="value">要定位的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="value">当此方法返回值时, 如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会返回 item 参数的类型默认值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.GetValue(`0,System.Func{`1},System.Boolean,System.Boolean)">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">如果没有该键, 构建值的函数</param>
            <param name="lockCreate">构建值时加锁</param>
            <param name="reset">如果找到该键, 是否重置</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.GetValue(`0,System.Func{`1},System.Boolean,System.Func{`1,System.Boolean})">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">如果没有该键, 构建值的函数</param>
            <param name="lockCreate">构建值时加锁</param>
            <param name="reset">如果找到该键, 是否重置的函数(null代表false)</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.GetValue(`0,System.Func{System.Threading.Tasks.Task{`1}},System.Boolean,System.Boolean)">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">如果没有该键, 构建值的函数</param>
            <param name="lockCreate">构建值时加锁</param>
            <param name="reset">如果找到该键, 是否重置</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.GetValue(`0,System.Func{System.Threading.Tasks.Task{`1}},System.Boolean,System.Func{`1,System.Boolean})">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">如果没有该键, 构建值的函数</param>
            <param name="lockCreate">构建值时加锁</param>
            <param name="reset">如果找到该键, 是否重置的函数(null代表false)</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            添加项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.AddOnce(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            一次添加项(如果已含则不添加)
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Add(`0,`1)">
            <summary>
            将指定的键和值添加到字典中
            </summary>
            <param name="key">键</param>
            <param name="value">要添加的元素的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.AddOnce(`0,`1)">
            <summary>
            一次将指定的键和值添加到字典中(如果已含则不添加)
            </summary>
            <param name="key">键</param>
            <param name="value">要添加的元素的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            移除项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Remove(`0)">
            <summary>
            移除所指定的键的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Clear">
            <summary>
            移除所有的键和值
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.Clear(System.Action{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}})">
            <summary>
            移除所有的键和值
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.ReplaceValue(`0,System.Func{`1,`1})">
            <summary>
            替换值
            </summary>
            <param name="key">键</param>
            <param name="doReplace">替换值的函数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            从指定的数组索引开始, 将元素复制到一个数组中
            </summary>
            <param name="array">数组</param>
            <param name="arrayIndex">数组索引</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedSortedList`2">
            <summary>
            表示键/值对的集合
            这些键/值对基于关联的比较器实现按照键进行排序
            支持 ICachedObject
            </summary>
            <typeparam name="TKey">集合中键的类型</typeparam>
            <typeparam name="TValue">集合中值的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.#ctor">
            <summary>
            初始化
            该实例为空且具有默认的初始容量, 并使用键类型的默认相等比较器
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.#ctor(System.Int32)">
            <summary>
            初始化
            该实例为空且具有指定的初始容量, 并为键类型使用默认的相等比较器
            </summary>
            <param name="capacity">可包含的初始元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素并为键类型使用默认的相等比较器
            </summary>
            <param name="dictionary">它的元素被复制到本实例中</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            初始化
            该实例为空且具有默认的初始容量，并使用指定的比较器
            </summary>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素, 并使用指定的比较器
            </summary>
            <param name="dictionary">它的元素被复制到新的集合中</param>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            初始化
            该实例为空且具有指定的初始容量，并使用指定的比较器
            </summary>
            <param name="capacity">可包含的初始元素数</param>
            <param name="comparer">比较器. 或为 null 以使用默认比较器</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Comparer">
            <summary>
            获取用于对集合的元素进行排序的比较器
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Count">
            <summary>
            获取包含在集合中的键/值对的数目
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Item(`0)">
            <summary>
            获取或设置与指定的键相关联的值
            </summary>
            <param name="key">要获取或设置的值的键</param>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Keys">
            <summary>
            获取键的集合, 为静态副本
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Values">
            <summary>
            获取值的集合, 为静态副本
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedList`2.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Capacity">
            <summary>
            获取或设置集合可包含的元素数
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            确定是否包含项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.ContainsKey(`0)">
            <summary>
            确定是否包含指定的键
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.ContainsValue(`1)">
            <summary>
            确定是否包含特定值
            </summary>
            <param name="value">要定位的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.TryGetValue(`0,`1@)">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="value">当此方法返回值时, 如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会返回 item 参数的类型默认值</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.GetValue(`0,System.Func{`1},System.Boolean,System.Boolean)">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">如果没有该键, 构建值的函数</param>
            <param name="lockCreate">构建值时加锁</param>
            <param name="reset">如果找到该键, 是否重置</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.GetValue(`0,System.Func{`1},System.Boolean,System.Func{`1,System.Boolean})">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">如果没有该键, 构建值的函数</param>
            <param name="lockCreate">构建值时加锁</param>
            <param name="reset">如果找到该键, 是否重置的函数(null代表false)</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.GetValue(`0,System.Func{System.Threading.Tasks.Task{`1}},System.Boolean,System.Boolean)">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">如果没有该键, 构建值的函数</param>
            <param name="lockCreate">构建值时加锁</param>
            <param name="reset">如果找到该键, 是否重置</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.GetValue(`0,System.Func{System.Threading.Tasks.Task{`1}},System.Boolean,System.Func{`1,System.Boolean})">
            <summary>
            获取与指定的键相关联的值
            </summary>
            <param name="key">键</param>
            <param name="doCreate">如果没有该键, 构建值的函数</param>
            <param name="lockCreate">构建值时加锁</param>
            <param name="reset">如果找到该键, 是否重置的函数(null代表false)</param>
            <returns>如果找到该键, 便会返回与指定的键相关联的值; 否则, 则会执行 doCreate 函数构建构建 item 的值关联到键并返回</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.IndexOfKey(`0)">
            <summary>
            在整个集合中搜索指定键并返回从零开始的索引
            </summary>
            <param name="key">要在集合中定位的键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.IndexOfValue(`1)">
            <summary>
            在整个集合中搜索指定的值, 并返回第一个匹配项的从零开始的索引
            </summary>
            <param name="value">要定位的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            添加项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.AddOnce(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            一次添加项(如果已含则不添加)
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Add(`0,`1)">
            <summary>
            将指定的键和值添加到集合中
            </summary>
            <param name="key">键</param>
            <param name="value">要添加的元素的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.AddOnce(`0,`1)">
            <summary>
            一次将指定的键和值添加到字典中(如果已含则不添加)
            </summary>
            <param name="key">键</param>
            <param name="value">要添加的元素的值. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            移除项
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Remove(`0)">
            <summary>
            移除所指定的键的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.RemoveAt(System.Int32)">
            <summary>
            移除集合中的指定索引处的元素
            </summary>
            <param name="index">要移除的元素的从零开始的索引</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Clear">
            <summary>
            移除所有的键和值
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.Clear(System.Action{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}})">
            <summary>
            移除所有的键和值
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.ReplaceValue(`0,System.Func{`1,`1})">
            <summary>
            替换值
            </summary>
            <param name="key">键</param>
            <param name="doReplace">替换值的函数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.TrimExcess">
            <summary>
            如果元素数小于当前容量的 90%, 将容量设置为集合中的实际元素数
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedSortedList`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            从指定的数组索引开始, 将元素复制到一个数组中
            </summary>
            <param name="array">数组</param>
            <param name="arrayIndex">数组索引</param>
        </member>
        <member name="T:Phenix.Core.SyncCollections.SynchronizedStack`1">
            <summary>
            表示同一任意类型的实例的大小可变的后进先出(LIFO)集合
            </summary>
            <typeparam name="T">指定堆栈中的元素的类型</typeparam>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化
            该实例包含从指定的集合中复制的元素并且其容量足以容纳所复制的元素数
            </summary>
            <param name="collection">其元素被复制到新的集合中的集合</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.#ctor(System.Int32)">
            <summary>
            初始化
            该实例为空并且具有指定的初始容量
            </summary>
            <param name="capacity">可包含的初始元素数</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="P:Phenix.Core.SyncCollections.SynchronizedStack`1.Count">
            <summary>
            获取集合中包含的元素数
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.Contains(`0)">
            <summary>
            确定某元素是否在集合中
            </summary>
            <param name="item">要定位的对象. 对于引用类型, 该值可以为 null</param>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.Push(`0)">
            <summary>
            将对象插入集合的顶部
            </summary>
            <param name="item">要推入到集合中的对象. 对于引用类型, 该值可以为 null</param>
            <returns>是否成功添加</returns>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.Pop">
            <summary>
            移除并返回位于集合顶部的对象
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.Peek">
            <summary>
            返回位于集合顶部的对象但不将其移除
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.Clear">
            <summary>
            移除所有节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.Clear(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            移除所有节点
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            返回循环访问的枚举数, 为静态副本
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.TrimExcess">
            <summary>
            如果元素数小于当前容量的 90%, 将容量设置为集合中的实际元素数
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.ToArray(System.Boolean)">
            <summary>
            将集合的元素复制到新数组中
            <param name="clearSource">并清空源</param>
            </summary>
        </member>
        <member name="M:Phenix.Core.SyncCollections.SynchronizedStack`1.CopyTo(`0[],System.Int32)">
            <summary>
            从指定数组索引开始将集合中的元素复制到现有一维 Array 中
            </summary>
            <param name="array">作为从集合中复制的元素的目标位置的一维 Array. Array 必须具有从零开始的索引</param>
            <param name="arrayIndex">array 中从零开始的索引, 在此处开始复制</param>
        </member>
        <member name="T:Phenix.Core.Threading.AsyncHelper">
            <summary>
            异步帮助
            </summary>
        </member>
        <member name="M:Phenix.Core.Threading.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            在阻塞上下文中执行异步代码
            </summary>
            <param name="task">Task method to execute</param>
        </member>
        <member name="M:Phenix.Core.Threading.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            在阻塞上下文中执行异步代码
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="task">异步任务</param>
            <returns>返回值</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.HttpRequestExtension">
            <summary>
            HttpRequest扩展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.HttpRequestExtension.GetRemoteAddress(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取远端IP地址
            前置条件：在Startup里应配置和使用转接头中间件（代理服务器和负载均衡器）
            </summary>
            <param name="request">HttpRequest</param>
            <returns>远端IP地址</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.HttpRequestExtension.GetLocalAddressPort(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取本地IP地址和端口
            </summary>
            <param name="request">HttpRequest</param>
            <returns>本地IP地址</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.HttpRequestExtension.GetAcceptLanguage(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取区域性名称
            </summary>
            <param name="request">HttpRequest</param>
            <returns>区域性名称</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.HttpRequestExtension.ReadBody(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取报文主体
            </summary>
            <param name="request">HttpRequest</param>
            <returns>报文主体</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.HttpRequestExtension.ReadBodyAsync``1(Microsoft.AspNetCore.Http.HttpRequest,System.Boolean)">
            <summary>
            获取报文主体
            </summary>
            <param name="request">HttpRequest</param>
            <param name="decrypt">需要解密</param>
            <returns>报文主体</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.HttpRequestExtension.ReadBodyAsDictionaryAsync(Microsoft.AspNetCore.Http.HttpRequest,System.Boolean)">
            <summary>
            获取报文主体
            </summary>
            <param name="request">HttpRequest</param>
            <param name="decrypt">需要解密</param>
            <returns>报文主体</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.HttpRequestExtension.ReadBodyAsStringAsync(Microsoft.AspNetCore.Http.HttpRequest,System.Boolean)">
            <summary>
            获取报文主体
            </summary>
            <param name="request">HttpRequest</param>
            <param name="decrypt">需要解密</param>
            <returns>报文主体</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.HttpRequestExtension.UploadFileChunkAsync(Microsoft.AspNetCore.Http.HttpRequest,Phenix.Core.IO.IFileService)">
            <summary>
            处理上传文件块
            </summary>
            <param name="request">HttpRequest</param>
            <param name="fileService">文件服务</param>
            <returns>完成上传时返回消息</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.HttpRequestExtension.UploadFileChunkAsync(Microsoft.AspNetCore.Http.HttpRequest,Phenix.Core.IO.IFileService,System.Threading.CancellationToken)">
            <summary>
            处理上传文件块
            </summary>
            <param name="request">HttpRequest</param>
            <param name="fileService">文件服务</param>
            <param name="cancellationToken">取消</param>
            <returns>完成上传时返回消息</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.HttpRequestExtension.DownloadFileChunkAsync(Microsoft.AspNetCore.Http.HttpRequest,System.String,System.String,System.Int32,Phenix.Core.IO.IFileService)">
            <summary>
            处理下载文件块
            </summary>
            <param name="request">HttpRequest</param>
            <param name="message">上传消息</param>
            <param name="fileName">下载文件名</param>
            <param name="chunkNumber">块号</param>
            <param name="fileService">文件服务</param>
            <returns>文件块信息</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.HttpRequestExtension.DownloadFileChunkAsync(Microsoft.AspNetCore.Http.HttpRequest,System.String,System.String,System.Int32,Phenix.Core.IO.IFileService,System.Threading.CancellationToken)">
            <summary>
            处理下载文件块
            </summary>
            <param name="request">HttpRequest</param>
            <param name="message">上传消息</param>
            <param name="fileName">下载文件名</param>
            <param name="chunkNumber">块号</param>
            <param name="fileService">文件服务</param>
            <param name="cancellationToken">取消</param>
            <returns>文件块信息</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpResponseExtension">
            <summary>
            HttpResponse扩展
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpResponseExtension.PackAsync(Microsoft.AspNetCore.Http.HttpResponse,System.Exception)">
            <summary>
            打包错误消息
            </summary>
            <param name="response">HttpResponse</param>
            <param name="error">错误消息</param>
        </member>
        <member name="T:System.Net.Http.HttpResponseMessageExtension">
            <summary>
            HttpResponseMessage扩展
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpResponseMessageExtension.ThrowIfFailedAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
            如果调用失败就抛出异常
            </summary>
            <param name="message">HttpResponseMessage</param>
        </member>
    </members>
</doc>
