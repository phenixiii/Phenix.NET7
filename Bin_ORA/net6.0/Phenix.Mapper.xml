<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Phenix.Mapper</name>
    </assembly>
    <members>
        <member name="T:Phenix.Mapper.DataAnnotations.AssociationDataException">
            <summary>
            关联数据异常
            </summary>
        </member>
        <member name="M:Phenix.Mapper.DataAnnotations.AssociationDataException.#ctor(System.Exception)">
            <summary>
            关联数据异常
            </summary>
        </member>
        <member name="M:Phenix.Mapper.DataAnnotations.AssociationDataException.#ctor(System.String,System.Exception)">
            <summary>
            关联数据异常
            </summary>
        </member>
        <member name="M:Phenix.Mapper.DataAnnotations.AssociationDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Mapper.DataAnnotations.OutdatedDataException">
            <summary>
            数据过时异常
            </summary>
        </member>
        <member name="M:Phenix.Mapper.DataAnnotations.OutdatedDataException.#ctor(System.Exception)">
            <summary>
            数据过时异常
            </summary>
        </member>
        <member name="M:Phenix.Mapper.DataAnnotations.OutdatedDataException.#ctor(System.String,System.Exception)">
            <summary>
            数据过时异常
            </summary>
        </member>
        <member name="M:Phenix.Mapper.DataAnnotations.OutdatedDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Mapper.DataAnnotations.UniqueConstraintException">
            <summary>
            唯一约束异常
            </summary>
        </member>
        <member name="M:Phenix.Mapper.DataAnnotations.UniqueConstraintException.#ctor(System.Exception)">
            <summary>
            唯一约束异常
            </summary>
        </member>
        <member name="M:Phenix.Mapper.DataAnnotations.UniqueConstraintException.#ctor(System.String,System.String,System.Object)">
            <summary>
            唯一约束异常
            </summary>
        </member>
        <member name="M:Phenix.Mapper.DataAnnotations.UniqueConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Expressions.CriteriaExpression">
            <summary>
            条件表达式
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.#ctor(Phenix.Mapper.Expressions.OperationExpression,Phenix.Mapper.Expressions.CriteriaOperator,System.Object,System.Boolean)">
            <summary>
            条件表达式
            </summary>
            <param name="leftOperation">左侧运算并表达式</param>
            <param name="criteriaOperator">条件运算符</param>
            <param name="value">值</param>
            <param name="ignoreCase">条件运算忽略大小写</param>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.True">
            <summary>
            条件表达式: True
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.False">
            <summary>
            条件表达式: False
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            条件表达式
            </summary>
            <param name="criteriaLambda">条件表达式</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.op_BitwiseAnd(Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.CriteriaExpression)">
            <summary>
            And
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.op_BitwiseAnd(Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            And
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.op_BitwiseAnd(System.Boolean,Phenix.Mapper.Expressions.CriteriaExpression)">
            <summary>
            And
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.op_BitwiseOr(Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.CriteriaExpression)">
            <summary>
            Or
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.op_BitwiseOr(Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            Or
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.op_BitwiseOr(System.Boolean,Phenix.Mapper.Expressions.CriteriaExpression)">
            <summary>
            Or
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.op_LogicalNot(Phenix.Mapper.Expressions.CriteriaExpression)">
            <summary>
            Not
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.Exists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Exists
            </summary>
            <param name="detailForeignKeyPropertyLambda">含从类虚/实外键属性的 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.Exists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Exists
            </summary>
            <param name="insideCriteriaLambda">内条件表达式</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.Exists(Phenix.Mapper.Expressions.CriteriaExpression)">
            <summary>
            Exists
            </summary>
            <param name="insideCriteriaExpression">内条件表达式</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.NotExists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            NotExists
            </summary>
            <param name="detailForeignKeyPropertyLambda">含从类虚/实外键属性的 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.NotExists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            NotExists
            </summary>
            <param name="insideCriteriaLambda">内条件表达式</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.NotExists(Phenix.Mapper.Expressions.CriteriaExpression)">
            <summary>
            NotExists
            </summary>
            <param name="insideCriteriaExpression">内条件表达式</param>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.OwnerType">
            <summary>
            所属类(指主体类)
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.CriteriaExpressionType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.Left">
            <summary>
            条件表达式左
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.FirstLeft">
            <summary>
            首个条件表达式左
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.Logical">
            <summary>
            条件组合关系
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.Right">
            <summary>
            条件表达式右
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.LeftOperation">
            <summary>
            条件运算表达式左
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.CriteriaOperator">
            <summary>
            条件运算符
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.OperateIgnoreCase">
            <summary>
            条件运算忽略大小写
            仅针对字符串类型的字段
            缺省为 false
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.RightOperation">
            <summary>
            条件运算表达式右
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.HaveValue">
            <summary>
            是否存在值
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.CriteriaExpression.ShortValue">
            <summary>
            短路值
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.CriteriaExpression.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Expressions.CriteriaExpressionType">
            <summary>
            条件表达式类型
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaExpressionType.CriteriaLogical">
            <summary>
            组合
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaExpressionType.CriteriaOperate">
            <summary>
            运算
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaExpressionType.ExistsOrNotExists">
            <summary>
            子条件
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaExpressionType.Short">
            <summary>
            短路
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Expressions.CriteriaLogical">
            <summary>
            条件组合关系
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaLogical.And">
            <summary>
            and
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaLogical.Or">
            <summary>
            or
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaLogical.Not">
            <summary>
            not
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Expressions.CriteriaOperator">
            <summary>
            条件运算符
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.None">
            <summary>
            无(不参与SQL的拼装但参与参数定义和赋值)
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.Embed">
            <summary>
            嵌入  
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.Equal">
            <summary>
            等于  
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.GreaterOrEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.Lesser">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.LesserOrEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.Unequal">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.Like">
            <summary>
            像
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.LikeLeft">
            <summary>
            像左侧
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.LikeRight">
            <summary>
            像右侧
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.Unlike">
            <summary>
            不像
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.IsNull">
            <summary>
            是空值
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.IsNotNull">
            <summary>
            非空值
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.In">
            <summary>
            包含(适用于关联关系也支持Array)
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.NotIn">
            <summary>
            不包含(适用于关联关系也支持Array)
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.Exists">
            <summary>
            存在于(适用于关联关系)
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.CriteriaOperator.NotExists">
            <summary>
            不存在于(适用于关联关系)
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Expressions.NameValue`1">
            <summary>
            键值对
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.NameValue`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            设置键值对
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.NameValue`1.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            设置键值对
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="valueLambda">值 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.NameValue`1.ToDictionary(Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            转换为数据字典
            </summary>
            <param name="nameValues">键值对队列</param>
            <returns>Name-Value</returns>
        </member>
        <member name="T:Phenix.Mapper.Expressions.NameValue">
            <summary>
            键值对
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.NameValue.#ctor(System.String,System.Object,Phenix.Mapper.Expressions.NameValue)">
            <summary>
            初始化
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="prior">先前</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.NameValue.Set(System.String,System.Object,Phenix.Mapper.Expressions.NameValue)">
            <summary>
            设置键值对
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="prior">先前</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.NameValue.Set``1(System.String,System.Object,Phenix.Mapper.Expressions.NameValue)">
            <summary>
            设置键值对
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="prior">先前</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.NameValue.Set``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,Phenix.Mapper.Expressions.NameValue)">
            <summary>
            设置键值对
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="value">值</param>
            <param name="prior">先前</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.NameValue.Set``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Phenix.Mapper.Expressions.NameValue)">
            <summary>
            设置键值对
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="valueLambda">值 lambda 表达式</param>
            <param name="prior">先前</param>
        </member>
        <member name="P:Phenix.Mapper.Expressions.NameValue.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.NameValue.Value">
            <summary>
            值/OperationExpression
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.NameValue.Prior">
            <summary>
            先前
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.NameValue.ToDictionary(Phenix.Mapper.Expressions.NameValue[])">
            <summary>
            转换为数据字典
            </summary>
            <param name="nameValues">键值对队列</param>
            <returns>Name-Value</returns>
        </member>
        <member name="T:Phenix.Mapper.Expressions.OperationExpression">
            <summary>
            运算表达式
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OperationExpression.#ctor(System.Reflection.MemberInfo)">
            <summary>
            运算表达式
            </summary>
            <param name="memberInfo">MemberInfo</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OperationExpression.#ctor(System.Object)">
            <summary>
            运算表达式
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OperationExpression.Compute``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            运算表达式
            </summary>
            <param name="valueLambda">值 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OperationExpression.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            In
            </summary>
            <param name="insidePropertyLambda">内实体属性的 lambda 表达式</param>
            <param name="insideCriteriaLambda">内条件表达式</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OperationExpression.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Phenix.Mapper.Expressions.CriteriaExpression)">
            <summary>
            In
            </summary>
            <param name="insidePropertyLambda">内实体属性的 lambda 表达式</param>
            <param name="insideCriteriaExpression">内条件表达式</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OperationExpression.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            NotIn
            </summary>
            <param name="insidePropertyLambda">内实体属性的 lambda 表达式</param>
            <param name="insideCriteriaLambda">内条件表达式</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OperationExpression.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Phenix.Mapper.Expressions.CriteriaExpression)">
            <summary>
            NotIn
            </summary>
            <param name="insidePropertyLambda">内实体属性的 lambda 表达式</param>
            <param name="insideCriteriaExpression">内条件表达式</param>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OperationExpression.OwnerTypeAssemblyQualifiedName">
            <summary>
            所属类程序集限定名
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OperationExpression.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OperationExpression.MemberName">
            <summary>
            属性/字段名
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OperationExpression.MemberInfo">
            <summary>
            类属性/类字段
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OperationExpression.MemberType">
            <summary>
            类属性/类字段类型
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OperationExpression.LeftOperation">
            <summary>
            运算表达式左
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OperationExpression.Sign">
            <summary>
            运算符号
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OperationExpression.RightOperation">
            <summary>
            运算表达式右
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OperationExpression.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OperationExpression.HaveValue">
            <summary>
            是否存在值
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OperationExpression.ValueType">
            <summary>
            值的类型
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OperationExpression.Arguments">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OperationExpression.Compute``1(``0)">
            <summary>
            运算表达式
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OperationExpression.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OperationExpression.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OperationExpression.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Expressions.OperationSign">
            <summary>
            运算符号
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.OperationSign.None">
            <summary>
            无 
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.OperationSign.Add">
            <summary>
            +
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.OperationSign.Subtract">
            <summary>
            -
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.OperationSign.Multiply">
            <summary>
            *
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.OperationSign.Divide">
            <summary>
            /
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.OperationSign.Length">
            <summary>
            字符数
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.OperationSign.ToLower">
            <summary>
            转换为小写形式
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.OperationSign.ToUpper">
            <summary>
            转换为大写形式
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.OperationSign.TrimStart">
            <summary>
            去除字符串左边的空格
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.OperationSign.TrimEnd">
            <summary>
            去除字符串右边的空格
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.OperationSign.Trim">
            <summary>
            去除字符串左右两边的空格
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.OperationSign.Substring">
            <summary>
            截取字符串
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Expressions.Order">
            <summary>
            顺序
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.Order.Ascending">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:Phenix.Mapper.Expressions.Order.Descending">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Expressions.OrderBy`1">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OrderBy`1.Ascending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            升序
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OrderBy`1.Descending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            降序
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
        </member>
        <member name="T:Phenix.Mapper.Expressions.OrderBy">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OrderBy.#ctor(System.String,Phenix.Mapper.Expressions.Order,Phenix.Mapper.Expressions.OrderBy)">
            <summary>
            初始化
            </summary>
            <param name="propertyName">属性名</param>
            <param name="order">顺序</param>
            <param name="prior">先前</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OrderBy.Ascending(System.String,Phenix.Mapper.Expressions.OrderBy)">
            <summary>
            升序
            </summary>
            <param name="propertyName">属性名</param>
            <param name="prior">先前</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OrderBy.Descending(System.String,Phenix.Mapper.Expressions.OrderBy)">
            <summary>
            降序
            </summary>
            <param name="propertyName">属性名</param>
            <param name="prior">先前</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OrderBy.Ascending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Phenix.Mapper.Expressions.OrderBy)">
            <summary>
            升序
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="prior">先前</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OrderBy.Descending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Phenix.Mapper.Expressions.OrderBy)">
            <summary>
            降序
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="prior">先前</param>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OrderBy.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OrderBy.Order">
            <summary>
            顺序
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Expressions.OrderBy.Prior">
            <summary>
            先前
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OrderBy.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OrderBy.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Expressions.OrderBy.ToString">
            <summary>
            字符串表示
            </summary>
        </member>
        <member name="T:Phenix.Mapper.IEntity`1">
            <summary>
            实体接口
            </summary>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.InsertOrUpdateSelf">
            <summary>
            新增自己如遇唯一键冲突则更新记录
            </summary>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.InsertOrUpdateSelf(System.Data.Common.DbConnection)">
            <summary>
            新增自己如遇唯一键冲突则更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.InsertOrUpdateSelf(System.Data.Common.DbTransaction)">
            <summary>
            新增自己如遇唯一键冲突则更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.InsertSelf">
            <summary>
            新增自己
            </summary>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.InsertSelf(System.Data.Common.DbConnection)">
            <summary>
            新增自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.InsertSelf(System.Data.Common.DbTransaction)">
            <summary>
            新增自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{`0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(`0,System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="source">数据源</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(Phenix.Mapper.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.UpdateSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.IEntity`1.DeleteSelf(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除自己
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="T:Phenix.Mapper.IEntity">
            <summary>
            实体接口
            </summary>
        </member>
        <member name="P:Phenix.Mapper.IEntity.Database">
            <summary>
            数据库入口
            </summary>
        </member>
        <member name="P:Phenix.Mapper.IEntity.SelfSheet">
            <summary>
            操作单子
            </summary>
        </member>
        <member name="P:Phenix.Mapper.IEntity.Root">
            <summary>
            根实体
            </summary>
        </member>
        <member name="P:Phenix.Mapper.IEntity.Master">
            <summary>
            主实体
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Schema.Column">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.FieldNameByTrimColumnName">
            <summary>
            字段名是否取自被整理的字段名(如果第1-PrefixCount位后是"_"则剔去其及之前的字符)
            默认：true
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.PrefixCount">
            <summary>
            前缀字符数
            默认：1-3
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.Owner">
            <summary>
            Owner
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.TableColumn">
            <summary>
            表字段
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.FullName">
            <summary>
            完整字段名(SheetName.Name)
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.Description">
            <summary>
            注释(中英文用‘|’分隔)
            Thread.CurrentThread.CurrentCulture.Name为非'zh-'时返回后半截
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.Nullable">
            <summary>
            Nullable
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.DataType">
            <summary>
            DataType
            不存在则返回 String.Empty
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.MappingType">
            <summary>
            映射类型
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.MappingTypeName">
            <summary>
            映射类型名
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.IsUnicode">
            <summary>
            IsUnicode
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.IsLongText">
            <summary>
            IsLongText
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.DataDefault">
            <summary>
            DataDefault
            不存在则返回 String.Empty
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.DataLength">
            <summary>
            DataLength
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.DataPrecision">
            <summary>
            DataPrecision
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.DataScale">
            <summary>
            DataScale
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.IsPrimaryKey">
            <summary>
            是否主键（字段类型需是长整型15位以上精度，新增记录时自动填充Sequence.Default.Value）
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.ForeignKey">
            <summary>
            外键
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.UniqueIndexes">
            <summary>
            唯一键索引队列
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.IsOriginatorColumn">
            <summary>
            是否"制单人"字段（字段类型需是字符串/长整型15位以上精度，新增记录时自动填充Identity.CurrentIdentity.User.Name/Id）
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.IsOriginateTimeColumn">
            <summary>
            是否"制单时间"字段（字段类型需是DateTime，新增记录时自动填充当前时间）
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.IsOriginateTeamsColumn">
            <summary>
            是否"制单团体"字段（字段类型需是字符串/长整型15位以上精度，新增记录时自动填充Identity.CurrentIdentity.User.RootTeams.Name/Id）
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.IsUpdaterColumn">
            <summary>
            是否"更新人"字段（字段类型需是字符串/长整型15位以上精度，更新记录时自动填充Identity.CurrentIdentity.User.Name/Id）
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.IsUpdateTimeColumn">
            <summary>
            是否"更新时间"字段（字段类型需是DateTime，更新记录时自动填充当前时间）
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.IsTimestampColumn">
            <summary>
            是否"时间戳"字段（字段类型需是长整型15位以上精度，更新记录时自动填充Sequence.Default.Value）
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.IsRouteColumn">
            <summary>
            是否HASH值路由增删改查数据库
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.IsWatermarkColumn">
            <summary>
            是否仅在insert时被提交
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.OverwritingOnUpdate">
            <summary>
            是否要在Update时被覆盖
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.PropertyName">
            <summary>
            类属性名
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.FieldName">
            <summary>
            类字段名
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Column.ParameterName">
            <summary>
            参数名
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.Column.GetProperty(System.Type,System.Boolean)">
            <summary>
            获取字段映射类属性
            </summary>
            <param name="entityType">实体类</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>类属性</returns>
        </member>
        <member name="T:Phenix.Mapper.Schema.ColumnAttribute">
            <summary>
            字段映射标签
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.ColumnAttribute.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="name">字段名</param>
        </member>
        <member name="P:Phenix.Mapper.Schema.ColumnAttribute.Name">
            <summary>
            字段名
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Schema.Field">
            <summary>
            数据映射字段信息
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Field.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Field.FieldInfo">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Field.OwnerSheet">
            <summary>
            所属单子
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Field.Column">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Field.GetValue">
            <summary>
            动态执行get函数的委托函数
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Field.Property">
            <summary>
            数据映射属性信息
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.Field.Set``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            设置值
            </summary>
            <param name="entity">实体</param>
            <param name="valueLambda">值 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到Set函数时引发 InvalidOperationException; 如果为 false, 则在找不到Set函数时返回 false</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Field.Set``1(``0,System.Object,System.Boolean)">
            <summary>
            设置值
            </summary>
            <param name="entity">实体</param>
            <param name="value">值/OperationExpression</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到Set函数时引发 InvalidOperationException; 如果为 false, 则在找不到Set函数时返回 false</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Field.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Field.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Schema.ForeignKey">
            <summary>
            外键
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.ForeignKey.Owner">
            <summary>
            所属数据库架构
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.ForeignKey.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.ForeignKey.TableName">
            <summary>
            TableName
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.ForeignKey.ColumnName">
            <summary>
            ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.ForeignKey.Table">
            <summary>
            Table
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.ForeignKey.PrimaryKeyTableName">
            <summary>
            主键TableName
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.ForeignKey.PrimaryKeyColumnName">
            <summary>
            主键ColumnName
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.ForeignKey.PrimaryKeyColumn">
            <summary>
            主键Column
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Schema.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Index.Owner">
            <summary>
            所属表
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Index.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Index.Unique">
            <summary>
            是唯一键
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Index.ColumnNames">
            <summary>
            字段名清单
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Schema.MetaData">
            <summary>
            元数据
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.Fetch(Phenix.Core.Data.Database)">
            <summary>
            获取
            </summary>
            <param name="database">Database</param>
            <returns>MetaData</returns>
        </member>
        <member name="P:Phenix.Mapper.Schema.MetaData.Database">
            <summary>
            数据库入口
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.MetaData.Tables">
            <summary>
            表清单
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.MetaData.Views">
            <summary>
            视图清单
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.ClearTableCache">
            <summary>
            刷新缓存
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.ClearViewCache">
            <summary>
            刷新缓存
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FillingCache">
            <summary>
            填充缓存
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindSheet(System.String,System.Boolean)">
            <summary>
            检索表/视图
            </summary>
            <param name="name">表/视图名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindSheet(System.String,System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索表/视图
            </summary>
            <param name="name">表/视图名</param>
            <param name="doCreate">如果没有找到表/视图则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindSheet``1(System.Boolean)">
            <summary>
            检索表/视图
            </summary>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表/视图</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindSheet(System.Type,System.Boolean)">
            <summary>
            检索表/视图
            </summary>
            <param name="entityType">实体类</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表/视图</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindSheet``1(System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索表/视图
            </summary>
            <param name="doCreate">如果没有映射的表/视图则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表/视图</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindSheet(System.Type,System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索表/视图
            </summary>
            <param name="entityType">实体类</param>
            <param name="doCreate">如果没有映射的表/视图则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表/视图</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindTable``1(System.Boolean)">
            <summary>
            检索表
            </summary>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindTable(System.Type,System.Boolean)">
            <summary>
            检索表
            </summary>
            <param name="entityType">实体类</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindTable``1(System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索表
            </summary>
            <param name="doCreate">如果没有映射的表则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindTable(System.Type,System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索表
            </summary>
            <param name="entityType">实体类</param>
            <param name="doCreate">如果没有映射的表则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindTable(System.String,System.Boolean)">
            <summary>
            检索表
            </summary>
            <param name="tableName">表名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindTable(System.String,System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索表
            </summary>
            <param name="tableName">表名</param>
            <param name="doCreate">如果没有找到表则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindView``1(System.Boolean)">
            <summary>
            检索视图
            </summary>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>视图</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindView(System.Type,System.Boolean)">
            <summary>
            检索视图
            </summary>
            <param name="entityType">实体类</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>视图</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindView``1(System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索视图
            </summary>
            <param name="doCreate">如果没有映射的视图则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>视图</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindView(System.Type,System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索视图
            </summary>
            <param name="entityType">实体类</param>
            <param name="doCreate">如果没有映射的视图则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>视图</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindView(System.String,System.Boolean)">
            <summary>
            检索视图
            </summary>
            <param name="viewName">视图名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>视图</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.FindView(System.String,System.Action{Phenix.Core.Data.Database},System.Boolean)">
            <summary>
            检索视图
            </summary>
            <param name="viewName">视图名</param>
            <param name="doCreate">如果没有找到视图则调用本函数新增</param>
            <param name="throwIfNotFound">如果为 true 且 doCreate 为 null, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>视图</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.MetaData.ExtractViewTables(System.String)">
            <summary>
            提取视图中表队列
            </summary>
            <param name="viewText">视图文本</param>
            <returns>表队列</returns>
        </member>
        <member name="T:Phenix.Mapper.Schema.Property">
            <summary>
            数据映射属性信息
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Property.OwnerType">
            <summary>
            所属类
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Property.PropertyInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Property.OwnerSheet">
            <summary>
            所属单子
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Property.ColumnAttribute">
            <summary>
            字段映射标签
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Property.Column">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Property.Description">
            <summary>
            优先取 DisplayAttribute.Description(中英文用‘|’分隔)
            其次取 Column.Description
            最后取 PropertyName
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Property.ValidationAttributes">
            <summary>
            校验规则标签
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Property.GetValue">
            <summary>
            动态执行get函数的委托函数
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Property.Field">
            <summary>
            数据映射字段信息
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.Property.Set``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            设置值
            </summary>
            <param name="entity">实体</param>
            <param name="valueLambda">值 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到Set函数时引发 InvalidOperationException; 如果为 false, 则在找不到Set函数时返回 false</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Property.Set``1(``0,System.Object,System.Boolean)">
            <summary>
            设置值
            </summary>
            <param name="entity">实体</param>
            <param name="value">值/OperationExpression</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到Set函数时引发 InvalidOperationException; 如果为 false, 则在找不到Set函数时返回 false</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Property.Validate(System.Object)">
            <summary>
            核对值的有效性
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Property.Validate``1(System.Object,``0)">
            <summary>
            核对值的有效性
            </summary>
            <param name="value">值</param>
            <param name="entity">实体</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Property.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Property.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Schema.Sheet">
            <summary>
            单子
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,Phenix.Mapper.Schema.Column})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.#ctor(Phenix.Mapper.Schema.MetaData,System.String,System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Sheet.Owner">
            <summary>
            所属数据库架构
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Sheet.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Sheet.Description">
            <summary>
            注释(中英文用‘|’分隔)
            Thread.CurrentThread.CurrentCulture.Name为非'zh-'时返回后半截
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Sheet.Columns">
            <summary>
            字段清单
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Sheet.PrimaryKeyColumns">
            <summary>
            主键字段清单
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Sheet.ForeignKeyColumns">
            <summary>
            外键字段清单
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Sheet.OriginateTeamsColumns">
            <summary>
            制单团体字段清单
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Sheet.TimestampColumns">
            <summary>
            "时间戳"字段清单
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Sheet.RouteColumns">
            <summary>
            "HASH值路由增删改查数据库"字段清单
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Sheet.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Sheet.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Sheet.Handles">
            <summary>
            实际操作的单子(0为主库序号，1-N为分库序号)
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.GetHandle(System.Object)">
            <summary>
            获取实际操作的单子
            </summary>
            <param name="routeKey">路由键</param>
            <returns>Handles[routeKey != null ? Math.Abs(routeKey.GetHashCode()) % (Handles.Count + 1) : 0]</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.GetHandle``1(``0)">
            <summary>
            获取实际操作的单子(取实体的路由字段值作为路由键)
            </summary>
            <param name="entity">实体</param>
            <returns>Handles[routeKey != null ? Math.Abs(routeKey.GetHashCode()) % (Handles.Count + 1) : 0]</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.GetFields(System.Type,Phenix.Mapper.Schema.Sheet,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            获取数据映射类字段(均映射的是遍历类时遇到的第一个符合条件的表)
            </summary>
            <param name="entityType">实体类</param>
            <param name="targetTable">所属表</param>
            <param name="isWatermarkColumn">是否仅在insert时被提交</param>
            <param name="overwritingOnUpdate">是否要在Update时被覆盖</param>
            <returns>类字段名-类字段</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.GetField(System.Type,System.String,System.Boolean)">
            <summary>
            获取数据映射类字段
            </summary>
            <param name="entityType">实体类</param>
            <param name="fieldName">字段名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>类字段</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.GetProperties(System.Type,Phenix.Mapper.Schema.Sheet,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            获取数据映射类属性(均映射的是遍历类时遇到的第一个符合条件的表)
            </summary>
            <param name="entityType">实体类</param>
            <param name="targetTable">所属表</param>
            <param name="isWatermarkColumn">是否仅在insert时被提交</param>
            <param name="overwritingOnUpdate">是否要在Update时被覆盖</param>
            <returns>类字段名-类字段</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            获取数据映射类属性
            </summary>
            <param name="propertyLambda">含类属性的 lambda 表达式</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>类属性</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.GetProperty(System.Type,System.String,System.Boolean)">
            <summary>
            获取数据映射类属性
            </summary>
            <param name="entityType">实体类</param>
            <param name="propertyName">属性名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>类属性</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.GetPrimaryKeyProperty(System.Type,System.Boolean)">
            <summary>
            检索主键表字段映射类属性
            </summary>
            <param name="entityType">实体类</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>类属性</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.FindColumn(System.String,System.Boolean)">
            <summary>
            检索字段
            </summary>
            <param name="name">字段名/类属性名/类字段名</param>
            <param name="throwIfNotFound">如果为 true, 则会在找不到信息时引发 InvalidOperationException; 如果为 false, 则在找不到信息时返回 null</param>
            <returns>字段</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.GetColumns(System.Boolean,System.Boolean)">
            <summary>
            获取字段清单
            </summary>
            <param name="isWatermarkColumn">是否仅在insert时被提交</param>
            <param name="overwritingOnUpdate">是否要在Update时被覆盖</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.Validate``1(``0,Phenix.Core.Data.ExecuteAction,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            核对有效性
            </summary>
            <param name="entity">实体</param>
            <param name="executeAction">执行动作</param>
            <param name="propertyValues">属性值队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.FillReservedFields``1(``0,Phenix.Core.Data.ExecuteAction)">
            <summary>
            填充保留字段
            </summary>
            <param name="entity">实体</param>
            <param name="executeAction">执行动作</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.FillReservedProperties(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object},Phenix.Core.Data.ExecuteAction)">
            <summary>
            填充保留属性
            </summary>
            <param name="entityType">实体类</param>
            <param name="propertyValues">属性值队列</param>
            <param name="executeAction">执行动作</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.Apply``1(``0,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            应用属性值
            </summary>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.Apply``1(``0,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            应用属性值
            </summary>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段)</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertOrUpdateEntity``1(``0)">
            <summary>
            新增记录如遇唯一键冲突则更新记录
            </summary>
            <param name="entity">实体</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertOrUpdateEntity``1(System.Data.Common.DbConnection,``0)">
            <summary>
            新增记录如遇唯一键冲突则更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertOrUpdateEntity``1(System.Data.Common.DbTransaction,``0)">
            <summary>
            新增记录如遇唯一键冲突则更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertOrUpdateEntity``1(System.Data.Common.DbCommand,``0)">
            <summary>
            新增记录如遇唯一键冲突则更新记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertEntity``1(``0)">
            <summary>
            新增记录
            </summary>
            <param name="entity">实体</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertEntity``1(System.Data.Common.DbConnection,``0)">
            <summary>
            新增记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertEntity``1(System.Data.Common.DbTransaction,``0)">
            <summary>
            新增记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertEntity``1(System.Data.Common.DbCommand,``0)">
            <summary>
            新增记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertRecord``1(Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertRecord``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertRecord``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertRecord``1(System.Data.Common.DbCommand,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertRecord``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertRecord``1(System.Data.Common.DbConnection,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertRecord``1(System.Data.Common.DbTransaction,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.InsertRecord``1(System.Data.Common.DbCommand,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            新增记录(仅提交第一个属性映射的表记录)
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="propertyValues">待更新属性值队列(仅提交第一个属性映射的表)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbCommand,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbCommand,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbConnection,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateEntity``1(System.Data.Common.DbCommand,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            更新记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列(如果没有set语句的话就直接更新字段，null代表提交的是实体本身)</param>
            <param name="checkTimestamp">是否检查时间戳（不一致时抛出Phenix.Core.Data.Rule.OutdatedDataException）</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbCommand,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.NameValue{``0}[])">
            <summary>
            更新记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord(Phenix.Mapper.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.UpdateRecord(System.Data.Common.DbCommand,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            更新记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="propertyValues">待更新属性值队列</param>
            <returns>更新记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(``0,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="entity">实体</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbConnection,``0,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbConnection,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbConnection,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbTransaction,``0,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbTransaction,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteEntity``1(System.Data.Common.DbTransaction,``0,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Boolean)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="entity">实体</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="cascade">是否级联</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            删除记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteRecord(Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            删除记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            删除记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteRecord(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            删除记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteRecord(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            删除记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.DeleteRecord(System.Data.Common.DbCommand,Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            删除记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>删除记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``2(System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``2(System.Linq.Expressions.Expression{System.Func{``1,``0}},Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``1,``0}},Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``1,``0}},Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``2(System.Data.Common.DbCommand,System.Linq.Expressions.Expression{System.Func{``1,``0}},Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="keyLambda">键 lambda 表达式</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``2(System.Data.IDataReader,System.Linq.Expressions.Expression{System.Func{``1,``0}})">
            <summary>
            获取记录
            </summary>
            <param name="reader">IDataReader</param>
            <param name="keyLambda">键 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstEntity``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.Common.DbCommand,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,System.Boolean,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectEntity``1(System.Data.IDataReader,System.Boolean)">
            <summary>
            获取记录
            </summary>
            <param name="reader">IDataReader</param>
            <param name="first">是否返回第一条记录</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``1(System.Data.Common.DbCommand,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,System.Boolean,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(Phenix.Mapper.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectFirstRecord``2(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord``2(System.Data.Common.DbCommand,Phenix.Mapper.Expressions.CriteriaExpression,System.Object,System.Int32,System.Int32,System.Boolean,Phenix.Mapper.Expressions.OrderBy{``0}[])">
            <summary>
            获取记录
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <param name="pageNo">页码(1..N, 0为不分页)</param>
            <param name="pageSize">分页大小</param>
            <param name="first">是否返回第一条记录</param>
            <param name="orderBys">排序队列</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.SelectRecord(System.Data.IDataReader,System.Boolean)">
            <summary>
            获取记录(JSON格式(仅返回匹配上本字段清单的属性值))
            </summary>
            <param name="reader">IDataReader</param>
            <param name="first">是否返回第一条记录</param>
            <returns>记录(JSON格式)</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.RecordCount``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            获取记录数
            </summary>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.RecordCount(Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录数
            </summary>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.RecordCount``1(System.Data.Common.DbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            获取记录数
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.RecordCount(System.Data.Common.DbConnection,Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录数
            </summary>
            <param name="connection">DbConnection(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.RecordCount``1(System.Data.Common.DbTransaction,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
            <summary>
            获取记录数
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaLambda">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.RecordCount(System.Data.Common.DbTransaction,Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录数
            </summary>
            <param name="transaction">DbTransaction(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.RecordCount(System.Data.Common.DbCommand,Phenix.Mapper.Expressions.CriteriaExpression,System.Object)">
            <summary>
            获取记录数
            </summary>
            <param name="command">DbCommand(注意跨库风险未作校验)</param>
            <param name="criteriaExpression">条件表达式</param>
            <param name="criteria">条件对象/JSON格式字符串/属性值队列</param>
            <returns>记录数</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.Equals(System.Object)">
            <summary>
            比较对象
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Phenix.Mapper.Schema.Sheet.GetHashCode">
            <summary>
            取哈希值(注意字符串在32位和64位系统有不同的算法得到不同的结果) 
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Schema.SheetAttribute">
            <summary>
            表/视图映射标签
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.SheetAttribute.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="name">表名/视图名</param>
        </member>
        <member name="P:Phenix.Mapper.Schema.SheetAttribute.Name">
            <summary>
            表名/视图名
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.SheetAttribute.PrimaryKeyName">
            <summary>
            主键名
            </summary>
        </member>
        <member name="T:Phenix.Mapper.Schema.Table">
            <summary>
            表
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Table.Owner">
            <summary>
            所属数据库架构
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Table.PrimaryKeys">
            <summary>
            主键清单
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Table.ForeignKeys">
            <summary>
            外键清单
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Table.DetailForeignKeys">
            <summary>
            子键清单
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Table.Indexes">
            <summary>
            索引清单
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Table.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.Table.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.Table.FindUniqueIndexes(System.String)">
            <summary>
            检索唯一键索引队列
            </summary>
            <param name="columnName">字段名</param>
            <returns>唯一键索引队列</returns>
        </member>
        <member name="T:Phenix.Mapper.Schema.View">
            <summary>
            视图
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.View.ViewText">
            <summary>
            ViewText
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.View.Tables">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.View.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:Phenix.Mapper.Schema.View.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="M:Phenix.Mapper.Schema.View.FindTable(System.String)">
            <summary>
            检索表
            </summary>
            <param name="tableName">表名</param>
            <returns>表</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.View.FindTableColumn(System.String)">
            <summary>
            检索表字段
            </summary>
            <param name="columnAlias">字段别名</param>
            <returns>表字段</returns>
        </member>
        <member name="M:Phenix.Mapper.Schema.View.FindTableColumn(System.String,System.String)">
            <summary>
            检索表字段
            </summary>
            <param name="tableName">表名</param>
            <param name="columnAlias">字段别名</param>
            <returns>表字段</returns>
        </member>
        <member name="T:Phenix.Core.Data.DatabaseExtension">
            <summary>
            数据库入口扩展
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DatabaseExtension.ReadEntityData``2(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{``1,``0}},System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            读取实体对象数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DatabaseExtension.ReadEntityData``2(Phenix.Core.Data.Database,System.Linq.Expressions.Expression{System.Func{``1,``0}},System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            读取实体对象数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DatabaseExtension.ReadEntityData``1(Phenix.Core.Data.Database,System.String,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            读取实体对象数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DatabaseExtension.ReadEntityData``1(Phenix.Core.Data.Database,System.String,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            读取实体对象数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DatabaseExtension.ReadEntityData``1(Phenix.Core.Data.Database,System.String,System.Data.CommandBehavior,Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            读取实体对象数据
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.DatabaseExtension.ReadEntityData``1(Phenix.Core.Data.Database,System.String,System.Data.CommandBehavior,System.Nullable{System.Boolean},Phenix.Core.Data.Common.ParamValue[])">
            <summary>
            读取实体对象数据
            </summary>
        </member>
        <member name="T:Phenix.Core.Data.Common.DataReaderExtension">
            <summary>
            数据读取器扩展
            </summary>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReaderExtension.ReadEntity``2(Phenix.Core.Data.Common.DataReader,System.Linq.Expressions.Expression{System.Func{``1,``0}})">
            <summary>
            读取Entity记录
            </summary>
            <param name="dataReader">DataReader</param>
            <param name="keyLambda">键 lambda 表达式</param>
        </member>
        <member name="M:Phenix.Core.Data.Common.DataReaderExtension.ReadEntity``1(Phenix.Core.Data.Common.DataReader,System.Boolean)">
            <summary>
            读取Entity记录
            </summary>
            <param name="dataReader">DataReader</param>
            <param name="first">是否返回第一条记录</param>
        </member>
    </members>
</doc>
